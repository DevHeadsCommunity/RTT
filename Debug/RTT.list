
RTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002018  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080021dc  080021dc  000031dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002254  08002254  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002254  08002254  00003254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800225c  0800225c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800225c  0800225c  0000325c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002260  08002260  00003260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002264  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d8  2000000c  08002270  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  08002270  000044e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005170  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001275  00000000  00000000  000091ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005a8  00000000  00000000  0000a428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000437  00000000  00000000  0000a9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020a8f  00000000  00000000  0000ae07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000070af  00000000  00000000  0002b896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c655a  00000000  00000000  00032945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f8e9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001588  00000000  00000000  000f8ee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000fa46c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080021c4 	.word	0x080021c4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080021c4 	.word	0x080021c4

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b96a 	b.w	8000500 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	460c      	mov	r4, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14e      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000250:	4694      	mov	ip, r2
 8000252:	458c      	cmp	ip, r1
 8000254:	4686      	mov	lr, r0
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	d962      	bls.n	8000322 <__udivmoddi4+0xde>
 800025c:	b14a      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 800025e:	f1c2 0320 	rsb	r3, r2, #32
 8000262:	4091      	lsls	r1, r2
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	fa0c fc02 	lsl.w	ip, ip, r2
 800026c:	4319      	orrs	r1, r3
 800026e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000272:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000276:	fa1f f68c 	uxth.w	r6, ip
 800027a:	fbb1 f4f7 	udiv	r4, r1, r7
 800027e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000282:	fb07 1114 	mls	r1, r7, r4, r1
 8000286:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028a:	fb04 f106 	mul.w	r1, r4, r6
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f104 30ff 	add.w	r0, r4, #4294967295
 800029a:	f080 8112 	bcs.w	80004c2 <__udivmoddi4+0x27e>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 810f 	bls.w	80004c2 <__udivmoddi4+0x27e>
 80002a4:	3c02      	subs	r4, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a59      	subs	r1, r3, r1
 80002aa:	fa1f f38e 	uxth.w	r3, lr
 80002ae:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b2:	fb07 1110 	mls	r1, r7, r0, r1
 80002b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ba:	fb00 f606 	mul.w	r6, r0, r6
 80002be:	429e      	cmp	r6, r3
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x94>
 80002c2:	eb1c 0303 	adds.w	r3, ip, r3
 80002c6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ca:	f080 80fc 	bcs.w	80004c6 <__udivmoddi4+0x282>
 80002ce:	429e      	cmp	r6, r3
 80002d0:	f240 80f9 	bls.w	80004c6 <__udivmoddi4+0x282>
 80002d4:	4463      	add	r3, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	1b9b      	subs	r3, r3, r6
 80002da:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa6>
 80002e2:	40d3      	lsrs	r3, r2
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xba>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb4>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa6>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x150>
 8000306:	42a3      	cmp	r3, r4
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xcc>
 800030a:	4290      	cmp	r0, r2
 800030c:	f0c0 80f0 	bcc.w	80004f0 <__udivmoddi4+0x2ac>
 8000310:	1a86      	subs	r6, r0, r2
 8000312:	eb64 0303 	sbc.w	r3, r4, r3
 8000316:	2001      	movs	r0, #1
 8000318:	2d00      	cmp	r5, #0
 800031a:	d0e6      	beq.n	80002ea <__udivmoddi4+0xa6>
 800031c:	e9c5 6300 	strd	r6, r3, [r5]
 8000320:	e7e3      	b.n	80002ea <__udivmoddi4+0xa6>
 8000322:	2a00      	cmp	r2, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x204>
 8000328:	eba1 040c 	sub.w	r4, r1, ip
 800032c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000330:	fa1f f78c 	uxth.w	r7, ip
 8000334:	2101      	movs	r1, #1
 8000336:	fbb4 f6f8 	udiv	r6, r4, r8
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb08 4416 	mls	r4, r8, r6, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb07 f006 	mul.w	r0, r7, r6
 800034a:	4298      	cmp	r0, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x11c>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 34ff 	add.w	r4, r6, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x11a>
 8000358:	4298      	cmp	r0, r3
 800035a:	f200 80cd 	bhi.w	80004f8 <__udivmoddi4+0x2b4>
 800035e:	4626      	mov	r6, r4
 8000360:	1a1c      	subs	r4, r3, r0
 8000362:	fa1f f38e 	uxth.w	r3, lr
 8000366:	fbb4 f0f8 	udiv	r0, r4, r8
 800036a:	fb08 4410 	mls	r4, r8, r0, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb00 f707 	mul.w	r7, r0, r7
 8000376:	429f      	cmp	r7, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x148>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x146>
 8000384:	429f      	cmp	r7, r3
 8000386:	f200 80b0 	bhi.w	80004ea <__udivmoddi4+0x2a6>
 800038a:	4620      	mov	r0, r4
 800038c:	1bdb      	subs	r3, r3, r7
 800038e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x9c>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a4:	fa04 f301 	lsl.w	r3, r4, r1
 80003a8:	ea43 030c 	orr.w	r3, r3, ip
 80003ac:	40f4      	lsrs	r4, r6
 80003ae:	fa00 f801 	lsl.w	r8, r0, r1
 80003b2:	0c38      	lsrs	r0, r7, #16
 80003b4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b8:	fbb4 fef0 	udiv	lr, r4, r0
 80003bc:	fa1f fc87 	uxth.w	ip, r7
 80003c0:	fb00 441e 	mls	r4, r0, lr, r4
 80003c4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c8:	fb0e f90c 	mul.w	r9, lr, ip
 80003cc:	45a1      	cmp	r9, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d90a      	bls.n	80003ea <__udivmoddi4+0x1a6>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003da:	f080 8084 	bcs.w	80004e6 <__udivmoddi4+0x2a2>
 80003de:	45a1      	cmp	r9, r4
 80003e0:	f240 8081 	bls.w	80004e6 <__udivmoddi4+0x2a2>
 80003e4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	eba4 0409 	sub.w	r4, r4, r9
 80003ee:	fa1f f983 	uxth.w	r9, r3
 80003f2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f6:	fb00 4413 	mls	r4, r0, r3, r4
 80003fa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000402:	45a4      	cmp	ip, r4
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x1d2>
 8000406:	193c      	adds	r4, r7, r4
 8000408:	f103 30ff 	add.w	r0, r3, #4294967295
 800040c:	d267      	bcs.n	80004de <__udivmoddi4+0x29a>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d965      	bls.n	80004de <__udivmoddi4+0x29a>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041a:	fba0 9302 	umull	r9, r3, r0, r2
 800041e:	eba4 040c 	sub.w	r4, r4, ip
 8000422:	429c      	cmp	r4, r3
 8000424:	46ce      	mov	lr, r9
 8000426:	469c      	mov	ip, r3
 8000428:	d351      	bcc.n	80004ce <__udivmoddi4+0x28a>
 800042a:	d04e      	beq.n	80004ca <__udivmoddi4+0x286>
 800042c:	b155      	cbz	r5, 8000444 <__udivmoddi4+0x200>
 800042e:	ebb8 030e 	subs.w	r3, r8, lr
 8000432:	eb64 040c 	sbc.w	r4, r4, ip
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	40cb      	lsrs	r3, r1
 800043c:	431e      	orrs	r6, r3
 800043e:	40cc      	lsrs	r4, r1
 8000440:	e9c5 6400 	strd	r6, r4, [r5]
 8000444:	2100      	movs	r1, #0
 8000446:	e750      	b.n	80002ea <__udivmoddi4+0xa6>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f103 	lsr.w	r1, r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa24 f303 	lsr.w	r3, r4, r3
 8000458:	4094      	lsls	r4, r2
 800045a:	430c      	orrs	r4, r1
 800045c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000460:	fa00 fe02 	lsl.w	lr, r0, r2
 8000464:	fa1f f78c 	uxth.w	r7, ip
 8000468:	fbb3 f0f8 	udiv	r0, r3, r8
 800046c:	fb08 3110 	mls	r1, r8, r0, r3
 8000470:	0c23      	lsrs	r3, r4, #16
 8000472:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000476:	fb00 f107 	mul.w	r1, r0, r7
 800047a:	4299      	cmp	r1, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x24c>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 36ff 	add.w	r6, r0, #4294967295
 8000486:	d22c      	bcs.n	80004e2 <__udivmoddi4+0x29e>
 8000488:	4299      	cmp	r1, r3
 800048a:	d92a      	bls.n	80004e2 <__udivmoddi4+0x29e>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1a5b      	subs	r3, r3, r1
 8000492:	b2a4      	uxth	r4, r4
 8000494:	fbb3 f1f8 	udiv	r1, r3, r8
 8000498:	fb08 3311 	mls	r3, r8, r1, r3
 800049c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a0:	fb01 f307 	mul.w	r3, r1, r7
 80004a4:	42a3      	cmp	r3, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x276>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b0:	d213      	bcs.n	80004da <__udivmoddi4+0x296>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d911      	bls.n	80004da <__udivmoddi4+0x296>
 80004b6:	3902      	subs	r1, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	1ae4      	subs	r4, r4, r3
 80004bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c0:	e739      	b.n	8000336 <__udivmoddi4+0xf2>
 80004c2:	4604      	mov	r4, r0
 80004c4:	e6f0      	b.n	80002a8 <__udivmoddi4+0x64>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e706      	b.n	80002d8 <__udivmoddi4+0x94>
 80004ca:	45c8      	cmp	r8, r9
 80004cc:	d2ae      	bcs.n	800042c <__udivmoddi4+0x1e8>
 80004ce:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7a8      	b.n	800042c <__udivmoddi4+0x1e8>
 80004da:	4631      	mov	r1, r6
 80004dc:	e7ed      	b.n	80004ba <__udivmoddi4+0x276>
 80004de:	4603      	mov	r3, r0
 80004e0:	e799      	b.n	8000416 <__udivmoddi4+0x1d2>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e7d4      	b.n	8000490 <__udivmoddi4+0x24c>
 80004e6:	46d6      	mov	lr, sl
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1a6>
 80004ea:	4463      	add	r3, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e74d      	b.n	800038c <__udivmoddi4+0x148>
 80004f0:	4606      	mov	r6, r0
 80004f2:	4623      	mov	r3, r4
 80004f4:	4608      	mov	r0, r1
 80004f6:	e70f      	b.n	8000318 <__udivmoddi4+0xd4>
 80004f8:	3e02      	subs	r6, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	e730      	b.n	8000360 <__udivmoddi4+0x11c>
 80004fe:	bf00      	nop

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800050a:	4b25      	ldr	r3, [pc, #148]	@ (80005a0 <_DoInit+0x9c>)
 800050c:	603b      	str	r3, [r7, #0]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	2203      	movs	r2, #3
 8000512:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	2203      	movs	r2, #3
 8000518:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	4a21      	ldr	r2, [pc, #132]	@ (80005a4 <_DoInit+0xa0>)
 800051e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	4a21      	ldr	r2, [pc, #132]	@ (80005a8 <_DoInit+0xa4>)
 8000524:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800052c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	2200      	movs	r2, #0
 8000532:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	2200      	movs	r2, #0
 8000538:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	2200      	movs	r2, #0
 800053e:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	4a18      	ldr	r2, [pc, #96]	@ (80005a4 <_DoInit+0xa0>)
 8000544:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	4a18      	ldr	r2, [pc, #96]	@ (80005ac <_DoInit+0xa8>)
 800054a:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	2210      	movs	r2, #16
 8000550:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	2200      	movs	r2, #0
 8000556:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	2200      	movs	r2, #0
 800055c:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	2200      	movs	r2, #0
 8000562:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000564:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000568:	2300      	movs	r3, #0
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	e00c      	b.n	8000588 <_DoInit+0x84>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	f1c3 030f 	rsb	r3, r3, #15
 8000574:	4a0e      	ldr	r2, [pc, #56]	@ (80005b0 <_DoInit+0xac>)
 8000576:	5cd1      	ldrb	r1, [r2, r3]
 8000578:	683a      	ldr	r2, [r7, #0]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4413      	add	r3, r2
 800057e:	460a      	mov	r2, r1
 8000580:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	3301      	adds	r3, #1
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2b0f      	cmp	r3, #15
 800058c:	d9ef      	bls.n	800056e <_DoInit+0x6a>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800058e:	f3bf 8f5f 	dmb	sy
}
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000028 	.word	0x20000028
 80005a4:	080021dc 	.word	0x080021dc
 80005a8:	200000d0 	.word	0x200000d0
 80005ac:	200004d0 	.word	0x200004d0
 80005b0:	08002220 	.word	0x08002220

080005b4 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	@ 0x28
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80005c0:	2300      	movs	r3, #0
 80005c2:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	691b      	ldr	r3, [r3, #16]
 80005ce:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80005d0:	69ba      	ldr	r2, [r7, #24]
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d905      	bls.n	80005e4 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80005d8:	69ba      	ldr	r2, [r7, #24]
 80005da:	69fb      	ldr	r3, [r7, #28]
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	3b01      	subs	r3, #1
 80005e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80005e2:	e007      	b.n	80005f4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	689a      	ldr	r2, [r3, #8]
 80005e8:	69b9      	ldr	r1, [r7, #24]
 80005ea:	69fb      	ldr	r3, [r7, #28]
 80005ec:	1acb      	subs	r3, r1, r3
 80005ee:	4413      	add	r3, r2
 80005f0:	3b01      	subs	r3, #1
 80005f2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	689a      	ldr	r2, [r3, #8]
 80005f8:	69fb      	ldr	r3, [r7, #28]
 80005fa:	1ad3      	subs	r3, r2, r3
 80005fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80005fe:	4293      	cmp	r3, r2
 8000600:	bf28      	it	cs
 8000602:	4613      	movcs	r3, r2
 8000604:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8000606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4293      	cmp	r3, r2
 800060c:	bf28      	it	cs
 800060e:	4613      	movcs	r3, r2
 8000610:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	685a      	ldr	r2, [r3, #4]
 8000616:	69fb      	ldr	r3, [r7, #28]
 8000618:	4413      	add	r3, r2
 800061a:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800061c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800061e:	68b9      	ldr	r1, [r7, #8]
 8000620:	6978      	ldr	r0, [r7, #20]
 8000622:	f001 fdc1 	bl	80021a8 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8000626:	6a3a      	ldr	r2, [r7, #32]
 8000628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800062a:	4413      	add	r3, r2
 800062c:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800062e:	68ba      	ldr	r2, [r7, #8]
 8000630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000632:	4413      	add	r3, r2
 8000634:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8000636:	687a      	ldr	r2, [r7, #4]
 8000638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800063a:	1ad3      	subs	r3, r2, r3
 800063c:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800063e:	69fa      	ldr	r2, [r7, #28]
 8000640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000642:	4413      	add	r3, r2
 8000644:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	689b      	ldr	r3, [r3, #8]
 800064a:	69fa      	ldr	r2, [r7, #28]
 800064c:	429a      	cmp	r2, r3
 800064e:	d101      	bne.n	8000654 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8000650:	2300      	movs	r3, #0
 8000652:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000654:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	69fa      	ldr	r2, [r7, #28]
 800065c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d1b2      	bne.n	80005ca <_WriteBlocking+0x16>
  return NumBytesWritten;
 8000664:	6a3b      	ldr	r3, [r7, #32]
}
 8000666:	4618      	mov	r0, r3
 8000668:	3728      	adds	r7, #40	@ 0x28
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800066e:	b580      	push	{r7, lr}
 8000670:	b088      	sub	sp, #32
 8000672:	af00      	add	r7, sp, #0
 8000674:	60f8      	str	r0, [r7, #12]
 8000676:	60b9      	str	r1, [r7, #8]
 8000678:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	68db      	ldr	r3, [r3, #12]
 800067e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	689a      	ldr	r2, [r3, #8]
 8000684:	69fb      	ldr	r3, [r7, #28]
 8000686:	1ad3      	subs	r3, r2, r3
 8000688:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800068a:	69ba      	ldr	r2, [r7, #24]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	429a      	cmp	r2, r3
 8000690:	d911      	bls.n	80006b6 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	685a      	ldr	r2, [r3, #4]
 8000696:	69fb      	ldr	r3, [r7, #28]
 8000698:	4413      	add	r3, r2
 800069a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	68b9      	ldr	r1, [r7, #8]
 80006a0:	6938      	ldr	r0, [r7, #16]
 80006a2:	f001 fd81 	bl	80021a8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80006a6:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80006aa:	69fa      	ldr	r2, [r7, #28]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	441a      	add	r2, r3
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80006b4:	e01f      	b.n	80006f6 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80006b6:	69bb      	ldr	r3, [r7, #24]
 80006b8:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	685a      	ldr	r2, [r3, #4]
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	4413      	add	r3, r2
 80006c2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80006c4:	697a      	ldr	r2, [r7, #20]
 80006c6:	68b9      	ldr	r1, [r7, #8]
 80006c8:	6938      	ldr	r0, [r7, #16]
 80006ca:	f001 fd6d 	bl	80021a8 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	69bb      	ldr	r3, [r7, #24]
 80006d2:	1ad3      	subs	r3, r2, r3
 80006d4:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80006dc:	68ba      	ldr	r2, [r7, #8]
 80006de:	69bb      	ldr	r3, [r7, #24]
 80006e0:	4413      	add	r3, r2
 80006e2:	697a      	ldr	r2, [r7, #20]
 80006e4:	4619      	mov	r1, r3
 80006e6:	6938      	ldr	r0, [r7, #16]
 80006e8:	f001 fd5e 	bl	80021a8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80006ec:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	697a      	ldr	r2, [r7, #20]
 80006f4:	60da      	str	r2, [r3, #12]
}
 80006f6:	bf00      	nop
 80006f8:	3720      	adds	r7, #32
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80006fe:	b480      	push	{r7}
 8000700:	b087      	sub	sp, #28
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	691b      	ldr	r3, [r3, #16]
 800070a:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8000712:	693a      	ldr	r2, [r7, #16]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	429a      	cmp	r2, r3
 8000718:	d808      	bhi.n	800072c <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	689a      	ldr	r2, [r3, #8]
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	1ad2      	subs	r2, r2, r3
 8000722:	693b      	ldr	r3, [r7, #16]
 8000724:	4413      	add	r3, r2
 8000726:	3b01      	subs	r3, #1
 8000728:	617b      	str	r3, [r7, #20]
 800072a:	e004      	b.n	8000736 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800072c:	693a      	ldr	r2, [r7, #16]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	3b01      	subs	r3, #1
 8000734:	617b      	str	r3, [r7, #20]
  }
  return r;
 8000736:	697b      	ldr	r3, [r7, #20]
}
 8000738:	4618      	mov	r0, r3
 800073a:	371c      	adds	r7, #28
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b08c      	sub	sp, #48	@ 0x30
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8000750:	4b3e      	ldr	r3, [pc, #248]	@ (800084c <SEGGER_RTT_ReadNoLock+0x108>)
 8000752:	623b      	str	r3, [r7, #32]
 8000754:	6a3b      	ldr	r3, [r7, #32]
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	b2db      	uxtb	r3, r3
 800075a:	2b00      	cmp	r3, #0
 800075c:	d101      	bne.n	8000762 <SEGGER_RTT_ReadNoLock+0x1e>
 800075e:	f7ff fed1 	bl	8000504 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	4613      	mov	r3, r2
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	4413      	add	r3, r2
 800076a:	00db      	lsls	r3, r3, #3
 800076c:	3360      	adds	r3, #96	@ 0x60
 800076e:	4a37      	ldr	r2, [pc, #220]	@ (800084c <SEGGER_RTT_ReadNoLock+0x108>)
 8000770:	4413      	add	r3, r2
 8000772:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	691b      	ldr	r3, [r3, #16]
 800077c:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	68db      	ldr	r3, [r3, #12]
 8000782:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8000784:	2300      	movs	r3, #0
 8000786:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8000788:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800078a:	69bb      	ldr	r3, [r7, #24]
 800078c:	429a      	cmp	r2, r3
 800078e:	d92b      	bls.n	80007e8 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8000790:	69fb      	ldr	r3, [r7, #28]
 8000792:	689a      	ldr	r2, [r3, #8]
 8000794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000796:	1ad3      	subs	r3, r2, r3
 8000798:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800079a:	697a      	ldr	r2, [r7, #20]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	4293      	cmp	r3, r2
 80007a0:	bf28      	it	cs
 80007a2:	4613      	movcs	r3, r2
 80007a4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	685a      	ldr	r2, [r3, #4]
 80007aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007ac:	4413      	add	r3, r2
 80007ae:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80007b0:	697a      	ldr	r2, [r7, #20]
 80007b2:	6939      	ldr	r1, [r7, #16]
 80007b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80007b6:	f001 fcf7 	bl	80021a8 <memcpy>
    NumBytesRead += NumBytesRem;
 80007ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	4413      	add	r3, r2
 80007c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80007c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	4413      	add	r3, r2
 80007c8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	1ad3      	subs	r3, r2, r3
 80007d0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80007d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	4413      	add	r3, r2
 80007d8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80007da:	69fb      	ldr	r3, [r7, #28]
 80007dc:	689b      	ldr	r3, [r3, #8]
 80007de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d101      	bne.n	80007e8 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80007e4:	2300      	movs	r3, #0
 80007e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80007e8:	69ba      	ldr	r2, [r7, #24]
 80007ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80007f0:	697a      	ldr	r2, [r7, #20]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4293      	cmp	r3, r2
 80007f6:	bf28      	it	cs
 80007f8:	4613      	movcs	r3, r2
 80007fa:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d019      	beq.n	8000836 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	685a      	ldr	r2, [r3, #4]
 8000806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000808:	4413      	add	r3, r2
 800080a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800080c:	697a      	ldr	r2, [r7, #20]
 800080e:	6939      	ldr	r1, [r7, #16]
 8000810:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000812:	f001 fcc9 	bl	80021a8 <memcpy>
    NumBytesRead += NumBytesRem;
 8000816:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	4413      	add	r3, r2
 800081c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800081e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	4413      	add	r3, r2
 8000824:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	1ad3      	subs	r3, r2, r3
 800082c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800082e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	4413      	add	r3, r2
 8000834:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8000836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000838:	2b00      	cmp	r3, #0
 800083a:	d002      	beq.n	8000842 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800083c:	69fb      	ldr	r3, [r7, #28]
 800083e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000840:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8000842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000844:	4618      	mov	r0, r3
 8000846:	3730      	adds	r7, #48	@ 0x30
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000028 	.word	0x20000028

08000850 <SEGGER_RTT_Read>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_Read(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
  unsigned NumBytesRead;

  SEGGER_RTT_LOCK();
 800085c:	f3ef 8311 	mrs	r3, BASEPRI
 8000860:	f04f 0120 	mov.w	r1, #32
 8000864:	f381 8811 	msr	BASEPRI, r1
 8000868:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking read function
  //
  NumBytesRead = SEGGER_RTT_ReadNoLock(BufferIndex, pBuffer, BufferSize);
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	68b9      	ldr	r1, [r7, #8]
 800086e:	68f8      	ldr	r0, [r7, #12]
 8000870:	f7ff ff68 	bl	8000744 <SEGGER_RTT_ReadNoLock>
 8000874:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	f383 8811 	msr	BASEPRI, r3
  //
  return NumBytesRead;
 800087c:	693b      	ldr	r3, [r7, #16]
}
 800087e:	4618      	mov	r0, r3
 8000880:	3718      	adds	r7, #24
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	1c5a      	adds	r2, r3, #1
 800089c:	4613      	mov	r3, r2
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	4413      	add	r3, r2
 80008a2:	00db      	lsls	r3, r3, #3
 80008a4:	4a1f      	ldr	r2, [pc, #124]	@ (8000924 <SEGGER_RTT_WriteNoLock+0x9c>)
 80008a6:	4413      	add	r3, r2
 80008a8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	d029      	beq.n	8000906 <SEGGER_RTT_WriteNoLock+0x7e>
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	d82e      	bhi.n	8000914 <SEGGER_RTT_WriteNoLock+0x8c>
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d002      	beq.n	80008c0 <SEGGER_RTT_WriteNoLock+0x38>
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d013      	beq.n	80008e6 <SEGGER_RTT_WriteNoLock+0x5e>
 80008be:	e029      	b.n	8000914 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80008c0:	6978      	ldr	r0, [r7, #20]
 80008c2:	f7ff ff1c 	bl	80006fe <_GetAvailWriteSpace>
 80008c6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80008c8:	693a      	ldr	r2, [r7, #16]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d202      	bcs.n	80008d6 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80008d4:	e021      	b.n	800091a <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	69b9      	ldr	r1, [r7, #24]
 80008de:	6978      	ldr	r0, [r7, #20]
 80008e0:	f7ff fec5 	bl	800066e <_WriteNoCheck>
    break;
 80008e4:	e019      	b.n	800091a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80008e6:	6978      	ldr	r0, [r7, #20]
 80008e8:	f7ff ff09 	bl	80006fe <_GetAvailWriteSpace>
 80008ec:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	4293      	cmp	r3, r2
 80008f4:	bf28      	it	cs
 80008f6:	4613      	movcs	r3, r2
 80008f8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80008fa:	69fa      	ldr	r2, [r7, #28]
 80008fc:	69b9      	ldr	r1, [r7, #24]
 80008fe:	6978      	ldr	r0, [r7, #20]
 8000900:	f7ff feb5 	bl	800066e <_WriteNoCheck>
    break;
 8000904:	e009      	b.n	800091a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	69b9      	ldr	r1, [r7, #24]
 800090a:	6978      	ldr	r0, [r7, #20]
 800090c:	f7ff fe52 	bl	80005b4 <_WriteBlocking>
 8000910:	61f8      	str	r0, [r7, #28]
    break;
 8000912:	e002      	b.n	800091a <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8000914:	2300      	movs	r3, #0
 8000916:	61fb      	str	r3, [r7, #28]
    break;
 8000918:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800091a:	69fb      	ldr	r3, [r7, #28]
}
 800091c:	4618      	mov	r0, r3
 800091e:	3720      	adds	r7, #32
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000028 	.word	0x20000028

08000928 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8000934:	4b0e      	ldr	r3, [pc, #56]	@ (8000970 <SEGGER_RTT_Write+0x48>)
 8000936:	61fb      	str	r3, [r7, #28]
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	b2db      	uxtb	r3, r3
 800093e:	2b00      	cmp	r3, #0
 8000940:	d101      	bne.n	8000946 <SEGGER_RTT_Write+0x1e>
 8000942:	f7ff fddf 	bl	8000504 <_DoInit>
  SEGGER_RTT_LOCK();
 8000946:	f3ef 8311 	mrs	r3, BASEPRI
 800094a:	f04f 0120 	mov.w	r1, #32
 800094e:	f381 8811 	msr	BASEPRI, r1
 8000952:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8000954:	687a      	ldr	r2, [r7, #4]
 8000956:	68b9      	ldr	r1, [r7, #8]
 8000958:	68f8      	ldr	r0, [r7, #12]
 800095a:	f7ff ff95 	bl	8000888 <SEGGER_RTT_WriteNoLock>
 800095e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8000966:	697b      	ldr	r3, [r7, #20]
}
 8000968:	4618      	mov	r0, r3
 800096a:	3720      	adds	r7, #32
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000028 	.word	0x20000028

08000974 <SEGGER_RTT_WriteString>:
*  Notes
*    (1) Data is stored according to buffer flags.
*    (2) String passed to this function has to be \0 terminated
*    (3) \0 termination character is *not* stored in RTT buffer
*/
unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	6039      	str	r1, [r7, #0]
  unsigned Len;

  Len = STRLEN(s);
 800097e:	6838      	ldr	r0, [r7, #0]
 8000980:	f7ff fc40 	bl	8000204 <strlen>
 8000984:	60f8      	str	r0, [r7, #12]
  return SEGGER_RTT_Write(BufferIndex, s, Len);
 8000986:	68fa      	ldr	r2, [r7, #12]
 8000988:	6839      	ldr	r1, [r7, #0]
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f7ff ffcc 	bl	8000928 <SEGGER_RTT_Write>
 8000990:	4603      	mov	r3, r0
}
 8000992:	4618      	mov	r0, r3
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	@ 0x28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
 80009a8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_UP* pUp;

  INIT();
 80009aa:	4b20      	ldr	r3, [pc, #128]	@ (8000a2c <SEGGER_RTT_ConfigUpBuffer+0x90>)
 80009ac:	623b      	str	r3, [r7, #32]
 80009ae:	6a3b      	ldr	r3, [r7, #32]
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d101      	bne.n	80009bc <SEGGER_RTT_ConfigUpBuffer+0x20>
 80009b8:	f7ff fda4 	bl	8000504 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80009bc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a2c <SEGGER_RTT_ConfigUpBuffer+0x90>)
 80009be:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d82a      	bhi.n	8000a1c <SEGGER_RTT_ConfigUpBuffer+0x80>
    SEGGER_RTT_LOCK();
 80009c6:	f3ef 8311 	mrs	r3, BASEPRI
 80009ca:	f04f 0120 	mov.w	r1, #32
 80009ce:	f381 8811 	msr	BASEPRI, r1
 80009d2:	61bb      	str	r3, [r7, #24]
    pUp = &pRTTCB->aUp[BufferIndex];
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	1c5a      	adds	r2, r3, #1
 80009d8:	4613      	mov	r3, r2
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	4413      	add	r3, r2
 80009de:	00db      	lsls	r3, r3, #3
 80009e0:	69fa      	ldr	r2, [r7, #28]
 80009e2:	4413      	add	r3, r2
 80009e4:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d00e      	beq.n	8000a0a <SEGGER_RTT_ConfigUpBuffer+0x6e>
      pUp->sName        = sName;
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	68ba      	ldr	r2, [r7, #8]
 80009f0:	601a      	str	r2, [r3, #0]
      pUp->pBuffer      = (char*)pBuffer;
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	605a      	str	r2, [r3, #4]
      pUp->SizeOfBuffer = BufferSize;
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	683a      	ldr	r2, [r7, #0]
 80009fc:	609a      	str	r2, [r3, #8]
      pUp->RdOff        = 0u;
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
      pUp->WrOff        = 0u;
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
    }
    pUp->Flags          = Flags;
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000a0e:	615a      	str	r2, [r3, #20]
    SEGGER_RTT_UNLOCK();
 8000a10:	69bb      	ldr	r3, [r7, #24]
 8000a12:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a1a:	e002      	b.n	8000a22 <SEGGER_RTT_ConfigUpBuffer+0x86>
  } else {
    r = -1;
 8000a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a20:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8000a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3728      	adds	r7, #40	@ 0x28
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000028 	.word	0x20000028

08000a30 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	460b      	mov	r3, r1
 8000a3a:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	1c5a      	adds	r2, r3, #1
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	d80e      	bhi.n	8000a6c <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	4413      	add	r3, r2
 8000a56:	78fa      	ldrb	r2, [r7, #3]
 8000a58:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	1c5a      	adds	r2, r3, #1
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	68db      	ldr	r3, [r3, #12]
 8000a66:	1c5a      	adds	r2, r3, #1
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	689a      	ldr	r2, [r3, #8]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d115      	bne.n	8000aa4 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6918      	ldr	r0, [r3, #16]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6819      	ldr	r1, [r3, #0]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	461a      	mov	r2, r3
 8000a86:	f7ff ff4f 	bl	8000928 <SEGGER_RTT_Write>
 8000a8a:	4602      	mov	r2, r0
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d004      	beq.n	8000a9e <_StoreChar+0x6e>
      p->ReturnValue = -1;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f04f 32ff 	mov.w	r2, #4294967295
 8000a9a:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 8000a9c:	e002      	b.n	8000aa4 <_StoreChar+0x74>
      p->Cnt = 0u;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
}
 8000aa4:	bf00      	nop
 8000aa6:	3710      	adds	r7, #16
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	@ 0x28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
 8000ab8:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8000ac6:	e007      	b.n	8000ad8 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8000ac8:	6a3a      	ldr	r2, [r7, #32]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad0:	623b      	str	r3, [r7, #32]
    Width++;
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8000ad8:	6a3a      	ldr	r2, [r7, #32]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d2f3      	bcs.n	8000ac8 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8000ae0:	683a      	ldr	r2, [r7, #0]
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d901      	bls.n	8000aec <_PrintUnsigned+0x40>
    Width = NumDigits;
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8000aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d125      	bne.n	8000b42 <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 8000af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d022      	beq.n	8000b42 <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8000afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d005      	beq.n	8000b12 <_PrintUnsigned+0x66>
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d102      	bne.n	8000b12 <_PrintUnsigned+0x66>
        c = '0';
 8000b0c:	2330      	movs	r3, #48	@ 0x30
 8000b0e:	76fb      	strb	r3, [r7, #27]
 8000b10:	e001      	b.n	8000b16 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8000b12:	2320      	movs	r3, #32
 8000b14:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000b16:	e00b      	b.n	8000b30 <_PrintUnsigned+0x84>
        FieldWidth--;
 8000b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8000b1e:	7efb      	ldrb	r3, [r7, #27]
 8000b20:	4619      	mov	r1, r3
 8000b22:	68f8      	ldr	r0, [r7, #12]
 8000b24:	f7ff ff84 	bl	8000a30 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	db07      	blt.n	8000b40 <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d005      	beq.n	8000b42 <_PrintUnsigned+0x96>
 8000b36:	69fa      	ldr	r2, [r7, #28]
 8000b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d3ec      	bcc.n	8000b18 <_PrintUnsigned+0x6c>
 8000b3e:	e000      	b.n	8000b42 <_PrintUnsigned+0x96>
          break;
 8000b40:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	68db      	ldr	r3, [r3, #12]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	db55      	blt.n	8000bf6 <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d903      	bls.n	8000b58 <_PrintUnsigned+0xac>
        NumDigits--;
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	3b01      	subs	r3, #1
 8000b54:	603b      	str	r3, [r7, #0]
 8000b56:	e009      	b.n	8000b6c <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 8000b58:	68ba      	ldr	r2, [r7, #8]
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b60:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8000b62:	697a      	ldr	r2, [r7, #20]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d200      	bcs.n	8000b6c <_PrintUnsigned+0xc0>
          break;
 8000b6a:	e005      	b.n	8000b78 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 8000b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	fb02 f303 	mul.w	r3, r2, r3
 8000b74:	627b      	str	r3, [r7, #36]	@ 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8000b76:	e7e8      	b.n	8000b4a <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 8000b78:	68ba      	ldr	r2, [r7, #8]
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b80:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b86:	fb02 f303 	mul.w	r3, r2, r3
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 8000b90:	4a1b      	ldr	r2, [pc, #108]	@ (8000c00 <_PrintUnsigned+0x154>)
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	4413      	add	r3, r2
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	68f8      	ldr	r0, [r7, #12]
 8000b9c:	f7ff ff48 	bl	8000a30 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	db08      	blt.n	8000bba <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 8000ba8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb0:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (Digit);
 8000bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d1df      	bne.n	8000b78 <_PrintUnsigned+0xcc>
 8000bb8:	e000      	b.n	8000bbc <_PrintUnsigned+0x110>
        break;
 8000bba:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8000bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d017      	beq.n	8000bf6 <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 8000bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d014      	beq.n	8000bf6 <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000bcc:	e00a      	b.n	8000be4 <_PrintUnsigned+0x138>
          FieldWidth--;
 8000bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	633b      	str	r3, [r7, #48]	@ 0x30
          _StoreChar(pBufferDesc, ' ');
 8000bd4:	2120      	movs	r1, #32
 8000bd6:	68f8      	ldr	r0, [r7, #12]
 8000bd8:	f7ff ff2a 	bl	8000a30 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	db07      	blt.n	8000bf4 <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d005      	beq.n	8000bf6 <_PrintUnsigned+0x14a>
 8000bea:	69fa      	ldr	r2, [r7, #28]
 8000bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d3ed      	bcc.n	8000bce <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 8000bf2:	e000      	b.n	8000bf6 <_PrintUnsigned+0x14a>
            break;
 8000bf4:	bf00      	nop
}
 8000bf6:	bf00      	nop
 8000bf8:	3728      	adds	r7, #40	@ 0x28
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	08002234 	.word	0x08002234

08000c04 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b088      	sub	sp, #32
 8000c08:	af02      	add	r7, sp, #8
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
 8000c10:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	bfb8      	it	lt
 8000c18:	425b      	neglt	r3, r3
 8000c1a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000c20:	e007      	b.n	8000c32 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c2a:	613b      	str	r3, [r7, #16]
    Width++;
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	daf3      	bge.n	8000c22 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8000c3a:	683a      	ldr	r2, [r7, #0]
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d901      	bls.n	8000c46 <_PrintInt+0x42>
    Width = NumDigits;
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8000c46:	6a3b      	ldr	r3, [r7, #32]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d00a      	beq.n	8000c62 <_PrintInt+0x5e>
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	db04      	blt.n	8000c5c <_PrintInt+0x58>
 8000c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c54:	f003 0304 	and.w	r3, r3, #4
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d002      	beq.n	8000c62 <_PrintInt+0x5e>
    FieldWidth--;
 8000c5c:	6a3b      	ldr	r3, [r7, #32]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8000c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c64:	f003 0302 	and.w	r3, r3, #2
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d002      	beq.n	8000c72 <_PrintInt+0x6e>
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d01c      	beq.n	8000cac <_PrintInt+0xa8>
 8000c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d117      	bne.n	8000cac <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8000c7c:	6a3b      	ldr	r3, [r7, #32]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d014      	beq.n	8000cac <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000c82:	e00a      	b.n	8000c9a <_PrintInt+0x96>
        FieldWidth--;
 8000c84:	6a3b      	ldr	r3, [r7, #32]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8000c8a:	2120      	movs	r1, #32
 8000c8c:	68f8      	ldr	r0, [r7, #12]
 8000c8e:	f7ff fecf 	bl	8000a30 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	68db      	ldr	r3, [r3, #12]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db07      	blt.n	8000caa <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000c9a:	6a3b      	ldr	r3, [r7, #32]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d005      	beq.n	8000cac <_PrintInt+0xa8>
 8000ca0:	697a      	ldr	r2, [r7, #20]
 8000ca2:	6a3b      	ldr	r3, [r7, #32]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d3ed      	bcc.n	8000c84 <_PrintInt+0x80>
 8000ca8:	e000      	b.n	8000cac <_PrintInt+0xa8>
          break;
 8000caa:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db4a      	blt.n	8000d4a <_PrintInt+0x146>
    if (v < 0) {
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	da07      	bge.n	8000cca <_PrintInt+0xc6>
      v = -v;
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	425b      	negs	r3, r3
 8000cbe:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8000cc0:	212d      	movs	r1, #45	@ 0x2d
 8000cc2:	68f8      	ldr	r0, [r7, #12]
 8000cc4:	f7ff feb4 	bl	8000a30 <_StoreChar>
 8000cc8:	e008      	b.n	8000cdc <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8000cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ccc:	f003 0304 	and.w	r3, r3, #4
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d003      	beq.n	8000cdc <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 8000cd4:	212b      	movs	r1, #43	@ 0x2b
 8000cd6:	68f8      	ldr	r0, [r7, #12]
 8000cd8:	f7ff feaa 	bl	8000a30 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db32      	blt.n	8000d4a <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8000ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d01f      	beq.n	8000d2e <_PrintInt+0x12a>
 8000cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d11a      	bne.n	8000d2e <_PrintInt+0x12a>
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d117      	bne.n	8000d2e <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 8000cfe:	6a3b      	ldr	r3, [r7, #32]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d014      	beq.n	8000d2e <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000d04:	e00a      	b.n	8000d1c <_PrintInt+0x118>
            FieldWidth--;
 8000d06:	6a3b      	ldr	r3, [r7, #32]
 8000d08:	3b01      	subs	r3, #1
 8000d0a:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 8000d0c:	2130      	movs	r1, #48	@ 0x30
 8000d0e:	68f8      	ldr	r0, [r7, #12]
 8000d10:	f7ff fe8e 	bl	8000a30 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	db07      	blt.n	8000d2c <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000d1c:	6a3b      	ldr	r3, [r7, #32]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d005      	beq.n	8000d2e <_PrintInt+0x12a>
 8000d22:	697a      	ldr	r2, [r7, #20]
 8000d24:	6a3b      	ldr	r3, [r7, #32]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d3ed      	bcc.n	8000d06 <_PrintInt+0x102>
 8000d2a:	e000      	b.n	8000d2e <_PrintInt+0x12a>
              break;
 8000d2c:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	68db      	ldr	r3, [r3, #12]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	db09      	blt.n	8000d4a <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 8000d36:	68b9      	ldr	r1, [r7, #8]
 8000d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d3a:	9301      	str	r3, [sp, #4]
 8000d3c:	6a3b      	ldr	r3, [r7, #32]
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	68f8      	ldr	r0, [r7, #12]
 8000d46:	f7ff feb1 	bl	8000aac <_PrintUnsigned>
      }
    }
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b0a2      	sub	sp, #136	@ 0x88
 8000d58:	af02      	add	r7, sp, #8
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 8000d60:	f107 0310 	add.w	r3, r7, #16
 8000d64:	653b      	str	r3, [r7, #80]	@ 0x50
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 8000d66:	2340      	movs	r3, #64	@ 0x40
 8000d68:	657b      	str	r3, [r7, #84]	@ 0x54
  BufferDesc.Cnt            = 0u;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	65bb      	str	r3, [r7, #88]	@ 0x58
  BufferDesc.RTTBufferIndex = BufferIndex;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	663b      	str	r3, [r7, #96]	@ 0x60
  BufferDesc.ReturnValue    = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	65fb      	str	r3, [r7, #92]	@ 0x5c

  do {
    c = *sFormat;
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    sFormat++;
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	3301      	adds	r3, #1
 8000d82:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 8000d84:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	f000 819f 	beq.w	80010cc <SEGGER_RTT_vprintf+0x378>
      break;
    }
    if (c == '%') {
 8000d8e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000d92:	2b25      	cmp	r3, #37	@ 0x25
 8000d94:	f040 818d 	bne.w	80010b2 <SEGGER_RTT_vprintf+0x35e>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	673b      	str	r3, [r7, #112]	@ 0x70
      v = 1;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	67bb      	str	r3, [r7, #120]	@ 0x78
      do {
        c = *sFormat;
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        switch (c) {
 8000da8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000dac:	3b23      	subs	r3, #35	@ 0x23
 8000dae:	2b0d      	cmp	r3, #13
 8000db0:	d83e      	bhi.n	8000e30 <SEGGER_RTT_vprintf+0xdc>
 8000db2:	a201      	add	r2, pc, #4	@ (adr r2, 8000db8 <SEGGER_RTT_vprintf+0x64>)
 8000db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db8:	08000e21 	.word	0x08000e21
 8000dbc:	08000e31 	.word	0x08000e31
 8000dc0:	08000e31 	.word	0x08000e31
 8000dc4:	08000e31 	.word	0x08000e31
 8000dc8:	08000e31 	.word	0x08000e31
 8000dcc:	08000e31 	.word	0x08000e31
 8000dd0:	08000e31 	.word	0x08000e31
 8000dd4:	08000e31 	.word	0x08000e31
 8000dd8:	08000e11 	.word	0x08000e11
 8000ddc:	08000e31 	.word	0x08000e31
 8000de0:	08000df1 	.word	0x08000df1
 8000de4:	08000e31 	.word	0x08000e31
 8000de8:	08000e31 	.word	0x08000e31
 8000dec:	08000e01 	.word	0x08000e01
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8000df0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000df2:	f043 0301 	orr.w	r3, r3, #1
 8000df6:	673b      	str	r3, [r7, #112]	@ 0x70
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	e01a      	b.n	8000e36 <SEGGER_RTT_vprintf+0xe2>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8000e00:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000e02:	f043 0302 	orr.w	r3, r3, #2
 8000e06:	673b      	str	r3, [r7, #112]	@ 0x70
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	e012      	b.n	8000e36 <SEGGER_RTT_vprintf+0xe2>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8000e10:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000e12:	f043 0304 	orr.w	r3, r3, #4
 8000e16:	673b      	str	r3, [r7, #112]	@ 0x70
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	e00a      	b.n	8000e36 <SEGGER_RTT_vprintf+0xe2>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8000e20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000e22:	f043 0308 	orr.w	r3, r3, #8
 8000e26:	673b      	str	r3, [r7, #112]	@ 0x70
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	e002      	b.n	8000e36 <SEGGER_RTT_vprintf+0xe2>
        default:  v = 0; break;
 8000e30:	2300      	movs	r3, #0
 8000e32:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000e34:	bf00      	nop
        }
      } while (v);
 8000e36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d1b1      	bne.n	8000da0 <SEGGER_RTT_vprintf+0x4c>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
      do {
        c = *sFormat;
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        if ((c < '0') || (c > '9')) {
 8000e48:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000e4c:	2b2f      	cmp	r3, #47	@ 0x2f
 8000e4e:	d912      	bls.n	8000e76 <SEGGER_RTT_vprintf+0x122>
 8000e50:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000e54:	2b39      	cmp	r3, #57	@ 0x39
 8000e56:	d80e      	bhi.n	8000e76 <SEGGER_RTT_vprintf+0x122>
          break;
        }
        sFormat++;
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 8000e5e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000e60:	4613      	mov	r3, r2
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	4413      	add	r3, r2
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	461a      	mov	r2, r3
 8000e6a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000e6e:	4413      	add	r3, r2
 8000e70:	3b30      	subs	r3, #48	@ 0x30
 8000e72:	66fb      	str	r3, [r7, #108]	@ 0x6c
        c = *sFormat;
 8000e74:	e7e4      	b.n	8000e40 <SEGGER_RTT_vprintf+0xec>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8000e76:	2300      	movs	r3, #0
 8000e78:	677b      	str	r3, [r7, #116]	@ 0x74
      c = *sFormat;
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      if (c == '.') {
 8000e82:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000e86:	2b2e      	cmp	r3, #46	@ 0x2e
 8000e88:	d11d      	bne.n	8000ec6 <SEGGER_RTT_vprintf+0x172>
        sFormat++;
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	60bb      	str	r3, [r7, #8]
        do {
          c = *sFormat;
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
          if ((c < '0') || (c > '9')) {
 8000e98:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000e9c:	2b2f      	cmp	r3, #47	@ 0x2f
 8000e9e:	d912      	bls.n	8000ec6 <SEGGER_RTT_vprintf+0x172>
 8000ea0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000ea4:	2b39      	cmp	r3, #57	@ 0x39
 8000ea6:	d80e      	bhi.n	8000ec6 <SEGGER_RTT_vprintf+0x172>
            break;
          }
          sFormat++;
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	60bb      	str	r3, [r7, #8]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 8000eae:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	4413      	add	r3, r2
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	461a      	mov	r2, r3
 8000eba:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000ebe:	4413      	add	r3, r2
 8000ec0:	3b30      	subs	r3, #48	@ 0x30
 8000ec2:	677b      	str	r3, [r7, #116]	@ 0x74
          c = *sFormat;
 8000ec4:	e7e4      	b.n	8000e90 <SEGGER_RTT_vprintf+0x13c>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      do {
        if ((c == 'l') || (c == 'h')) {
 8000ece:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000ed2:	2b6c      	cmp	r3, #108	@ 0x6c
 8000ed4:	d003      	beq.n	8000ede <SEGGER_RTT_vprintf+0x18a>
 8000ed6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000eda:	2b68      	cmp	r3, #104	@ 0x68
 8000edc:	d107      	bne.n	8000eee <SEGGER_RTT_vprintf+0x19a>
          sFormat++;
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        if ((c == 'l') || (c == 'h')) {
 8000eec:	e7ef      	b.n	8000ece <SEGGER_RTT_vprintf+0x17a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8000eee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000ef2:	2b25      	cmp	r3, #37	@ 0x25
 8000ef4:	f000 80d1 	beq.w	800109a <SEGGER_RTT_vprintf+0x346>
 8000ef8:	2b25      	cmp	r3, #37	@ 0x25
 8000efa:	f2c0 80d5 	blt.w	80010a8 <SEGGER_RTT_vprintf+0x354>
 8000efe:	2b78      	cmp	r3, #120	@ 0x78
 8000f00:	f300 80d2 	bgt.w	80010a8 <SEGGER_RTT_vprintf+0x354>
 8000f04:	2b58      	cmp	r3, #88	@ 0x58
 8000f06:	f2c0 80cf 	blt.w	80010a8 <SEGGER_RTT_vprintf+0x354>
 8000f0a:	3b58      	subs	r3, #88	@ 0x58
 8000f0c:	2b20      	cmp	r3, #32
 8000f0e:	f200 80cb 	bhi.w	80010a8 <SEGGER_RTT_vprintf+0x354>
 8000f12:	a201      	add	r2, pc, #4	@ (adr r2, 8000f18 <SEGGER_RTT_vprintf+0x1c4>)
 8000f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f18:	0800100f 	.word	0x0800100f
 8000f1c:	080010a9 	.word	0x080010a9
 8000f20:	080010a9 	.word	0x080010a9
 8000f24:	080010a9 	.word	0x080010a9
 8000f28:	080010a9 	.word	0x080010a9
 8000f2c:	080010a9 	.word	0x080010a9
 8000f30:	080010a9 	.word	0x080010a9
 8000f34:	080010a9 	.word	0x080010a9
 8000f38:	080010a9 	.word	0x080010a9
 8000f3c:	080010a9 	.word	0x080010a9
 8000f40:	080010a9 	.word	0x080010a9
 8000f44:	08000f9d 	.word	0x08000f9d
 8000f48:	08000fc3 	.word	0x08000fc3
 8000f4c:	080010a9 	.word	0x080010a9
 8000f50:	080010a9 	.word	0x080010a9
 8000f54:	080010a9 	.word	0x080010a9
 8000f58:	080010a9 	.word	0x080010a9
 8000f5c:	080010a9 	.word	0x080010a9
 8000f60:	080010a9 	.word	0x080010a9
 8000f64:	080010a9 	.word	0x080010a9
 8000f68:	080010a9 	.word	0x080010a9
 8000f6c:	080010a9 	.word	0x080010a9
 8000f70:	080010a9 	.word	0x080010a9
 8000f74:	080010a9 	.word	0x080010a9
 8000f78:	08001075 	.word	0x08001075
 8000f7c:	080010a9 	.word	0x080010a9
 8000f80:	080010a9 	.word	0x080010a9
 8000f84:	08001035 	.word	0x08001035
 8000f88:	080010a9 	.word	0x080010a9
 8000f8c:	08000fe9 	.word	0x08000fe9
 8000f90:	080010a9 	.word	0x080010a9
 8000f94:	080010a9 	.word	0x080010a9
 8000f98:	0800100f 	.word	0x0800100f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	1d19      	adds	r1, r3, #4
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	6011      	str	r1, [r2, #0]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	67bb      	str	r3, [r7, #120]	@ 0x78
        c0 = (char)v;
 8000faa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000fac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        _StoreChar(&BufferDesc, c0);
 8000fb0:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8000fb4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000fb8:	4611      	mov	r1, r2
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff fd38 	bl	8000a30 <_StoreChar>
        break;
 8000fc0:	e073      	b.n	80010aa <SEGGER_RTT_vprintf+0x356>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	1d19      	adds	r1, r3, #4
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	6011      	str	r1, [r2, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	67bb      	str	r3, [r7, #120]	@ 0x78
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8000fd0:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000fd4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000fd6:	9301      	str	r3, [sp, #4]
 8000fd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000fde:	220a      	movs	r2, #10
 8000fe0:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000fe2:	f7ff fe0f 	bl	8000c04 <_PrintInt>
        break;
 8000fe6:	e060      	b.n	80010aa <SEGGER_RTT_vprintf+0x356>
      case 'u':
        v = va_arg(*pParamList, int);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	1d19      	adds	r1, r3, #4
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	6011      	str	r1, [r2, #0]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	67bb      	str	r3, [r7, #120]	@ 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8000ff6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000ff8:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000ffc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000ffe:	9301      	str	r3, [sp, #4]
 8001000:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001006:	220a      	movs	r2, #10
 8001008:	f7ff fd50 	bl	8000aac <_PrintUnsigned>
        break;
 800100c:	e04d      	b.n	80010aa <SEGGER_RTT_vprintf+0x356>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	1d19      	adds	r1, r3, #4
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	6011      	str	r1, [r2, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	67bb      	str	r3, [r7, #120]	@ 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800101c:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800101e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8001022:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001024:	9301      	str	r3, [sp, #4]
 8001026:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800102c:	2210      	movs	r2, #16
 800102e:	f7ff fd3d 	bl	8000aac <_PrintUnsigned>
        break;
 8001032:	e03a      	b.n	80010aa <SEGGER_RTT_vprintf+0x356>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	1d19      	adds	r1, r3, #4
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	6011      	str	r1, [r2, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	66bb      	str	r3, [r7, #104]	@ 0x68
          do {
            c = *s;
 8001042:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            s++;
 800104a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800104c:	3301      	adds	r3, #1
 800104e:	66bb      	str	r3, [r7, #104]	@ 0x68
            if (c == '\0') {
 8001050:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00b      	beq.n	8001070 <SEGGER_RTT_vprintf+0x31c>
              break;
            }
           _StoreChar(&BufferDesc, c);
 8001058:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 800105c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001060:	4611      	mov	r1, r2
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fce4 	bl	8000a30 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 8001068:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800106a:	2b00      	cmp	r3, #0
 800106c:	dae9      	bge.n	8001042 <SEGGER_RTT_vprintf+0x2ee>
        }
        break;
 800106e:	e01c      	b.n	80010aa <SEGGER_RTT_vprintf+0x356>
              break;
 8001070:	bf00      	nop
        break;
 8001072:	e01a      	b.n	80010aa <SEGGER_RTT_vprintf+0x356>
      case 'p':
        v = va_arg(*pParamList, int);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	1d19      	adds	r1, r3, #4
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	6011      	str	r1, [r2, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	67bb      	str	r3, [r7, #120]	@ 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8001082:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8001084:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8001088:	2300      	movs	r3, #0
 800108a:	9301      	str	r3, [sp, #4]
 800108c:	2308      	movs	r3, #8
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2308      	movs	r3, #8
 8001092:	2210      	movs	r2, #16
 8001094:	f7ff fd0a 	bl	8000aac <_PrintUnsigned>
        break;
 8001098:	e007      	b.n	80010aa <SEGGER_RTT_vprintf+0x356>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800109a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800109e:	2125      	movs	r1, #37	@ 0x25
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fcc5 	bl	8000a30 <_StoreChar>
        break;
 80010a6:	e000      	b.n	80010aa <SEGGER_RTT_vprintf+0x356>
      default:
        break;
 80010a8:	bf00      	nop
      }
      sFormat++;
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	3301      	adds	r3, #1
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	e007      	b.n	80010c2 <SEGGER_RTT_vprintf+0x36e>
    } else {
      _StoreChar(&BufferDesc, c);
 80010b2:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 80010b6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80010ba:	4611      	mov	r1, r2
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fcb7 	bl	8000a30 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 80010c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f6bf ae56 	bge.w	8000d76 <SEGGER_RTT_vprintf+0x22>
 80010ca:	e000      	b.n	80010ce <SEGGER_RTT_vprintf+0x37a>
      break;
 80010cc:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 80010ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dd0d      	ble.n	80010f0 <SEGGER_RTT_vprintf+0x39c>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 80010d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d006      	beq.n	80010e8 <SEGGER_RTT_vprintf+0x394>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 80010da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80010dc:	f107 0310 	add.w	r3, r7, #16
 80010e0:	4619      	mov	r1, r3
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	f7ff fc20 	bl	8000928 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 80010e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80010ec:	4413      	add	r3, r2
 80010ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  }
  return BufferDesc.ReturnValue;
 80010f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3780      	adds	r7, #128	@ 0x80
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop

080010fc <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 80010fc:	b40e      	push	{r1, r2, r3}
 80010fe:	b580      	push	{r7, lr}
 8001100:	b085      	sub	sp, #20
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 8001106:	f107 0320 	add.w	r3, r7, #32
 800110a:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 800110c:	f107 0308 	add.w	r3, r7, #8
 8001110:	461a      	mov	r2, r3
 8001112:	69f9      	ldr	r1, [r7, #28]
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff fe1d 	bl	8000d54 <SEGGER_RTT_vprintf>
 800111a:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 800111c:	68fb      	ldr	r3, [r7, #12]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001128:	b003      	add	sp, #12
 800112a:	4770      	bx	lr

0800112c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001132:	f000 f963 	bl	80013fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001136:	f000 f825 	bl	8001184 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800113a:	f000 f883 	bl	8001244 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  uint8_t count = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	71fb      	strb	r3, [r7, #7]
  SEGGER_RTT_ConfigUpBuffer(0, NULL, NULL, 0, SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8001142:	2300      	movs	r3, #0
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	2300      	movs	r3, #0
 8001148:	2200      	movs	r2, #0
 800114a:	2100      	movs	r1, #0
 800114c:	2000      	movs	r0, #0
 800114e:	f7ff fc25 	bl	800099c <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_WriteString(0, RTT_CTRL_TEXT_BRIGHT_YELLOW"Welcome to DevHeads! \r\n"RTT_CTRL_RESET);
 8001152:	490a      	ldr	r1, [pc, #40]	@ (800117c <main+0x50>)
 8001154:	2000      	movs	r0, #0
 8001156:	f7ff fc0d 	bl	8000974 <SEGGER_RTT_WriteString>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	RTT_Read();
 800115a:	f000 f89b 	bl	8001294 <RTT_Read>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	SEGGER_RTT_printf(0, "Counter: %d \r\n", count++);
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	1c5a      	adds	r2, r3, #1
 8001162:	71fa      	strb	r2, [r7, #7]
 8001164:	461a      	mov	r2, r3
 8001166:	4906      	ldr	r1, [pc, #24]	@ (8001180 <main+0x54>)
 8001168:	2000      	movs	r0, #0
 800116a:	f7ff ffc7 	bl	80010fc <SEGGER_RTT_printf>
	HAL_Delay(5000);
 800116e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001172:	f000 f9b5 	bl	80014e0 <HAL_Delay>
	RTT_Read();
 8001176:	bf00      	nop
 8001178:	e7ef      	b.n	800115a <main+0x2e>
 800117a:	bf00      	nop
 800117c:	080021e8 	.word	0x080021e8
 8001180:	0800220c 	.word	0x0800220c

08001184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b094      	sub	sp, #80	@ 0x50
 8001188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118a:	f107 031c 	add.w	r3, r7, #28
 800118e:	2234      	movs	r2, #52	@ 0x34
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f000 ffdc 	bl	8002150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001198:	f107 0308 	add.w	r3, r7, #8
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a8:	2300      	movs	r3, #0
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	4b23      	ldr	r3, [pc, #140]	@ (800123c <SystemClock_Config+0xb8>)
 80011ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b0:	4a22      	ldr	r2, [pc, #136]	@ (800123c <SystemClock_Config+0xb8>)
 80011b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b8:	4b20      	ldr	r3, [pc, #128]	@ (800123c <SystemClock_Config+0xb8>)
 80011ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011c4:	2300      	movs	r3, #0
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001240 <SystemClock_Config+0xbc>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001240 <SystemClock_Config+0xbc>)
 80011d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	4b19      	ldr	r3, [pc, #100]	@ (8001240 <SystemClock_Config+0xbc>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011e0:	603b      	str	r3, [r7, #0]
 80011e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011e4:	2302      	movs	r3, #2
 80011e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011e8:	2301      	movs	r3, #1
 80011ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ec:	2310      	movs	r3, #16
 80011ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f4:	f107 031c 	add.w	r3, r7, #28
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 fd0b 	bl	8001c14 <HAL_RCC_OscConfig>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001204:	f000 f860 	bl	80012c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001208:	230f      	movs	r3, #15
 800120a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001210:	2300      	movs	r3, #0
 8001212:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800121c:	f107 0308 	add.w	r3, r7, #8
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f000 fa66 	bl	80016f4 <HAL_RCC_ClockConfig>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800122e:	f000 f84b 	bl	80012c8 <Error_Handler>
  }
}
 8001232:	bf00      	nop
 8001234:	3750      	adds	r7, #80	@ 0x50
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	40007000 	.word	0x40007000

08001244 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	4b10      	ldr	r3, [pc, #64]	@ (8001290 <MX_GPIO_Init+0x4c>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	4a0f      	ldr	r2, [pc, #60]	@ (8001290 <MX_GPIO_Init+0x4c>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6313      	str	r3, [r2, #48]	@ 0x30
 800125a:	4b0d      	ldr	r3, [pc, #52]	@ (8001290 <MX_GPIO_Init+0x4c>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	603b      	str	r3, [r7, #0]
 800126a:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <MX_GPIO_Init+0x4c>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	4a08      	ldr	r2, [pc, #32]	@ (8001290 <MX_GPIO_Init+0x4c>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	6313      	str	r3, [r2, #48]	@ 0x30
 8001276:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <MX_GPIO_Init+0x4c>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	603b      	str	r3, [r7, #0]
 8001280:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40023800 	.word	0x40023800

08001294 <RTT_Read>:

/* USER CODE BEGIN 4 */
void RTT_Read(void){
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
	char input;
	uint32_t size = SEGGER_RTT_Read(0, &input, 1u);
 800129a:	1cfb      	adds	r3, r7, #3
 800129c:	2201      	movs	r2, #1
 800129e:	4619      	mov	r1, r3
 80012a0:	2000      	movs	r0, #0
 80012a2:	f7ff fad5 	bl	8000850 <SEGGER_RTT_Read>
 80012a6:	6078      	str	r0, [r7, #4]

	// Echo the input
	if(size>0){
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d005      	beq.n	80012ba <RTT_Read+0x26>
		SEGGER_RTT_printf(0, "%c", input);
 80012ae:	78fb      	ldrb	r3, [r7, #3]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4904      	ldr	r1, [pc, #16]	@ (80012c4 <RTT_Read+0x30>)
 80012b4:	2000      	movs	r0, #0
 80012b6:	f7ff ff21 	bl	80010fc <SEGGER_RTT_printf>
	}
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	0800221c 	.word	0x0800221c

080012c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012cc:	b672      	cpsid	i
}
 80012ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <Error_Handler+0x8>

080012d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	4b10      	ldr	r3, [pc, #64]	@ (8001320 <HAL_MspInit+0x4c>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001320 <HAL_MspInit+0x4c>)
 80012e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001320 <HAL_MspInit+0x4c>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	603b      	str	r3, [r7, #0]
 80012fa:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <HAL_MspInit+0x4c>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fe:	4a08      	ldr	r2, [pc, #32]	@ (8001320 <HAL_MspInit+0x4c>)
 8001300:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001304:	6413      	str	r3, [r2, #64]	@ 0x40
 8001306:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <HAL_MspInit+0x4c>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40023800 	.word	0x40023800

08001324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <NMI_Handler+0x4>

0800132c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <HardFault_Handler+0x4>

08001334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <MemManage_Handler+0x4>

0800133c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <BusFault_Handler+0x4>

08001344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <UsageFault_Handler+0x4>

0800134c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800137a:	f000 f891 	bl	80014a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001388:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <SystemInit+0x20>)
 800138a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800138e:	4a05      	ldr	r2, [pc, #20]	@ (80013a4 <SystemInit+0x20>)
 8001390:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001394:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013ac:	f7ff ffea 	bl	8001384 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013b0:	480c      	ldr	r0, [pc, #48]	@ (80013e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013b2:	490d      	ldr	r1, [pc, #52]	@ (80013e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013b4:	4a0d      	ldr	r2, [pc, #52]	@ (80013ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b8:	e002      	b.n	80013c0 <LoopCopyDataInit>

080013ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013be:	3304      	adds	r3, #4

080013c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c4:	d3f9      	bcc.n	80013ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c6:	4a0a      	ldr	r2, [pc, #40]	@ (80013f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013c8:	4c0a      	ldr	r4, [pc, #40]	@ (80013f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013cc:	e001      	b.n	80013d2 <LoopFillZerobss>

080013ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d0:	3204      	adds	r2, #4

080013d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d4:	d3fb      	bcc.n	80013ce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80013d6:	f000 fec3 	bl	8002160 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013da:	f7ff fea7 	bl	800112c <main>
  bx  lr    
 80013de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013ec:	08002264 	.word	0x08002264
  ldr r2, =_sbss
 80013f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013f4:	200004e4 	.word	0x200004e4

080013f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013f8:	e7fe      	b.n	80013f8 <ADC_IRQHandler>
	...

080013fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001400:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <HAL_Init+0x40>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a0d      	ldr	r2, [pc, #52]	@ (800143c <HAL_Init+0x40>)
 8001406:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800140a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800140c:	4b0b      	ldr	r3, [pc, #44]	@ (800143c <HAL_Init+0x40>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a0a      	ldr	r2, [pc, #40]	@ (800143c <HAL_Init+0x40>)
 8001412:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001416:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001418:	4b08      	ldr	r3, [pc, #32]	@ (800143c <HAL_Init+0x40>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a07      	ldr	r2, [pc, #28]	@ (800143c <HAL_Init+0x40>)
 800141e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001422:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001424:	2003      	movs	r0, #3
 8001426:	f000 f931 	bl	800168c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800142a:	200f      	movs	r0, #15
 800142c:	f000 f808 	bl	8001440 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001430:	f7ff ff50 	bl	80012d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40023c00 	.word	0x40023c00

08001440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001448:	4b12      	ldr	r3, [pc, #72]	@ (8001494 <HAL_InitTick+0x54>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b12      	ldr	r3, [pc, #72]	@ (8001498 <HAL_InitTick+0x58>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	4619      	mov	r1, r3
 8001452:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001456:	fbb3 f3f1 	udiv	r3, r3, r1
 800145a:	fbb2 f3f3 	udiv	r3, r2, r3
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f93b 	bl	80016da <HAL_SYSTICK_Config>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e00e      	b.n	800148c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b0f      	cmp	r3, #15
 8001472:	d80a      	bhi.n	800148a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001474:	2200      	movs	r2, #0
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	f04f 30ff 	mov.w	r0, #4294967295
 800147c:	f000 f911 	bl	80016a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001480:	4a06      	ldr	r2, [pc, #24]	@ (800149c <HAL_InitTick+0x5c>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001486:	2300      	movs	r3, #0
 8001488:	e000      	b.n	800148c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000000 	.word	0x20000000
 8001498:	20000008 	.word	0x20000008
 800149c:	20000004 	.word	0x20000004

080014a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a4:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <HAL_IncTick+0x20>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <HAL_IncTick+0x24>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	4a04      	ldr	r2, [pc, #16]	@ (80014c4 <HAL_IncTick+0x24>)
 80014b2:	6013      	str	r3, [r2, #0]
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	20000008 	.word	0x20000008
 80014c4:	200004e0 	.word	0x200004e0

080014c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return uwTick;
 80014cc:	4b03      	ldr	r3, [pc, #12]	@ (80014dc <HAL_GetTick+0x14>)
 80014ce:	681b      	ldr	r3, [r3, #0]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	200004e0 	.word	0x200004e0

080014e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e8:	f7ff ffee 	bl	80014c8 <HAL_GetTick>
 80014ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f8:	d005      	beq.n	8001506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001524 <HAL_Delay+0x44>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4413      	add	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001506:	bf00      	nop
 8001508:	f7ff ffde 	bl	80014c8 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	429a      	cmp	r2, r3
 8001516:	d8f7      	bhi.n	8001508 <HAL_Delay+0x28>
  {
  }
}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000008 	.word	0x20000008

08001528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001538:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <__NVIC_SetPriorityGrouping+0x44>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001544:	4013      	ands	r3, r2
 8001546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001550:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001554:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800155a:	4a04      	ldr	r2, [pc, #16]	@ (800156c <__NVIC_SetPriorityGrouping+0x44>)
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	60d3      	str	r3, [r2, #12]
}
 8001560:	bf00      	nop
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001574:	4b04      	ldr	r3, [pc, #16]	@ (8001588 <__NVIC_GetPriorityGrouping+0x18>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	0a1b      	lsrs	r3, r3, #8
 800157a:	f003 0307 	and.w	r3, r3, #7
}
 800157e:	4618      	mov	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	6039      	str	r1, [r7, #0]
 8001596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159c:	2b00      	cmp	r3, #0
 800159e:	db0a      	blt.n	80015b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	490c      	ldr	r1, [pc, #48]	@ (80015d8 <__NVIC_SetPriority+0x4c>)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	0112      	lsls	r2, r2, #4
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	440b      	add	r3, r1
 80015b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b4:	e00a      	b.n	80015cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4908      	ldr	r1, [pc, #32]	@ (80015dc <__NVIC_SetPriority+0x50>)
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	f003 030f 	and.w	r3, r3, #15
 80015c2:	3b04      	subs	r3, #4
 80015c4:	0112      	lsls	r2, r2, #4
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	440b      	add	r3, r1
 80015ca:	761a      	strb	r2, [r3, #24]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000e100 	.word	0xe000e100
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b089      	sub	sp, #36	@ 0x24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f1c3 0307 	rsb	r3, r3, #7
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	bf28      	it	cs
 80015fe:	2304      	movcs	r3, #4
 8001600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3304      	adds	r3, #4
 8001606:	2b06      	cmp	r3, #6
 8001608:	d902      	bls.n	8001610 <NVIC_EncodePriority+0x30>
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3b03      	subs	r3, #3
 800160e:	e000      	b.n	8001612 <NVIC_EncodePriority+0x32>
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001614:	f04f 32ff 	mov.w	r2, #4294967295
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43da      	mvns	r2, r3
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	401a      	ands	r2, r3
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001628:	f04f 31ff 	mov.w	r1, #4294967295
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	fa01 f303 	lsl.w	r3, r1, r3
 8001632:	43d9      	mvns	r1, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001638:	4313      	orrs	r3, r2
         );
}
 800163a:	4618      	mov	r0, r3
 800163c:	3724      	adds	r7, #36	@ 0x24
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001658:	d301      	bcc.n	800165e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165a:	2301      	movs	r3, #1
 800165c:	e00f      	b.n	800167e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165e:	4a0a      	ldr	r2, [pc, #40]	@ (8001688 <SysTick_Config+0x40>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3b01      	subs	r3, #1
 8001664:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001666:	210f      	movs	r1, #15
 8001668:	f04f 30ff 	mov.w	r0, #4294967295
 800166c:	f7ff ff8e 	bl	800158c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001670:	4b05      	ldr	r3, [pc, #20]	@ (8001688 <SysTick_Config+0x40>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001676:	4b04      	ldr	r3, [pc, #16]	@ (8001688 <SysTick_Config+0x40>)
 8001678:	2207      	movs	r2, #7
 800167a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	e000e010 	.word	0xe000e010

0800168c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff ff47 	bl	8001528 <__NVIC_SetPriorityGrouping>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b086      	sub	sp, #24
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	4603      	mov	r3, r0
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b4:	f7ff ff5c 	bl	8001570 <__NVIC_GetPriorityGrouping>
 80016b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	6978      	ldr	r0, [r7, #20]
 80016c0:	f7ff ff8e 	bl	80015e0 <NVIC_EncodePriority>
 80016c4:	4602      	mov	r2, r0
 80016c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff5d 	bl	800158c <__NVIC_SetPriority>
}
 80016d2:	bf00      	nop
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff ffb0 	bl	8001648 <SysTick_Config>
 80016e8:	4603      	mov	r3, r0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e0cc      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001708:	4b68      	ldr	r3, [pc, #416]	@ (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 030f 	and.w	r3, r3, #15
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	429a      	cmp	r2, r3
 8001714:	d90c      	bls.n	8001730 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001716:	4b65      	ldr	r3, [pc, #404]	@ (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800171e:	4b63      	ldr	r3, [pc, #396]	@ (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	429a      	cmp	r2, r3
 800172a:	d001      	beq.n	8001730 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e0b8      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d020      	beq.n	800177e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	2b00      	cmp	r3, #0
 8001746:	d005      	beq.n	8001754 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001748:	4b59      	ldr	r3, [pc, #356]	@ (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	4a58      	ldr	r2, [pc, #352]	@ (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001752:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	2b00      	cmp	r3, #0
 800175e:	d005      	beq.n	800176c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001760:	4b53      	ldr	r3, [pc, #332]	@ (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	4a52      	ldr	r2, [pc, #328]	@ (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800176a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800176c:	4b50      	ldr	r3, [pc, #320]	@ (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	494d      	ldr	r1, [pc, #308]	@ (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	4313      	orrs	r3, r2
 800177c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d044      	beq.n	8001814 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d107      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001792:	4b47      	ldr	r3, [pc, #284]	@ (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d119      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e07f      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d003      	beq.n	80017b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	d107      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b2:	4b3f      	ldr	r3, [pc, #252]	@ (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d109      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e06f      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c2:	4b3b      	ldr	r3, [pc, #236]	@ (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e067      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017d2:	4b37      	ldr	r3, [pc, #220]	@ (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f023 0203 	bic.w	r2, r3, #3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	4934      	ldr	r1, [pc, #208]	@ (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e4:	f7ff fe70 	bl	80014c8 <HAL_GetTick>
 80017e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ea:	e00a      	b.n	8001802 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ec:	f7ff fe6c 	bl	80014c8 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e04f      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001802:	4b2b      	ldr	r3, [pc, #172]	@ (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 020c 	and.w	r2, r3, #12
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	429a      	cmp	r2, r3
 8001812:	d1eb      	bne.n	80017ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001814:	4b25      	ldr	r3, [pc, #148]	@ (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 030f 	and.w	r3, r3, #15
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	d20c      	bcs.n	800183c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001822:	4b22      	ldr	r3, [pc, #136]	@ (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800182a:	4b20      	ldr	r3, [pc, #128]	@ (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d001      	beq.n	800183c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e032      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b00      	cmp	r3, #0
 8001846:	d008      	beq.n	800185a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001848:	4b19      	ldr	r3, [pc, #100]	@ (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	4916      	ldr	r1, [pc, #88]	@ (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	4313      	orrs	r3, r2
 8001858:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	2b00      	cmp	r3, #0
 8001864:	d009      	beq.n	800187a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001866:	4b12      	ldr	r3, [pc, #72]	@ (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	490e      	ldr	r1, [pc, #56]	@ (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	4313      	orrs	r3, r2
 8001878:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800187a:	f000 f821 	bl	80018c0 <HAL_RCC_GetSysClockFreq>
 800187e:	4602      	mov	r2, r0
 8001880:	4b0b      	ldr	r3, [pc, #44]	@ (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	091b      	lsrs	r3, r3, #4
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	490a      	ldr	r1, [pc, #40]	@ (80018b4 <HAL_RCC_ClockConfig+0x1c0>)
 800188c:	5ccb      	ldrb	r3, [r1, r3]
 800188e:	fa22 f303 	lsr.w	r3, r2, r3
 8001892:	4a09      	ldr	r2, [pc, #36]	@ (80018b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001896:	4b09      	ldr	r3, [pc, #36]	@ (80018bc <HAL_RCC_ClockConfig+0x1c8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff fdd0 	bl	8001440 <HAL_InitTick>

  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40023c00 	.word	0x40023c00
 80018b0:	40023800 	.word	0x40023800
 80018b4:	08002244 	.word	0x08002244
 80018b8:	20000000 	.word	0x20000000
 80018bc:	20000004 	.word	0x20000004

080018c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018c4:	b0a6      	sub	sp, #152	@ 0x98
 80018c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80018d4:	2300      	movs	r3, #0
 80018d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80018da:	2300      	movs	r3, #0
 80018dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018e6:	4bc8      	ldr	r3, [pc, #800]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x348>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 030c 	and.w	r3, r3, #12
 80018ee:	2b0c      	cmp	r3, #12
 80018f0:	f200 817e 	bhi.w	8001bf0 <HAL_RCC_GetSysClockFreq+0x330>
 80018f4:	a201      	add	r2, pc, #4	@ (adr r2, 80018fc <HAL_RCC_GetSysClockFreq+0x3c>)
 80018f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018fa:	bf00      	nop
 80018fc:	08001931 	.word	0x08001931
 8001900:	08001bf1 	.word	0x08001bf1
 8001904:	08001bf1 	.word	0x08001bf1
 8001908:	08001bf1 	.word	0x08001bf1
 800190c:	08001939 	.word	0x08001939
 8001910:	08001bf1 	.word	0x08001bf1
 8001914:	08001bf1 	.word	0x08001bf1
 8001918:	08001bf1 	.word	0x08001bf1
 800191c:	08001941 	.word	0x08001941
 8001920:	08001bf1 	.word	0x08001bf1
 8001924:	08001bf1 	.word	0x08001bf1
 8001928:	08001bf1 	.word	0x08001bf1
 800192c:	08001aab 	.word	0x08001aab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001930:	4bb6      	ldr	r3, [pc, #728]	@ (8001c0c <HAL_RCC_GetSysClockFreq+0x34c>)
 8001932:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001936:	e15f      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001938:	4bb5      	ldr	r3, [pc, #724]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x350>)
 800193a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800193e:	e15b      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001940:	4bb1      	ldr	r3, [pc, #708]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x348>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001948:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800194c:	4bae      	ldr	r3, [pc, #696]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x348>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d031      	beq.n	80019bc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001958:	4bab      	ldr	r3, [pc, #684]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x348>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	099b      	lsrs	r3, r3, #6
 800195e:	2200      	movs	r2, #0
 8001960:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001962:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001964:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800196a:	663b      	str	r3, [r7, #96]	@ 0x60
 800196c:	2300      	movs	r3, #0
 800196e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001970:	4ba7      	ldr	r3, [pc, #668]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x350>)
 8001972:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001976:	462a      	mov	r2, r5
 8001978:	fb03 f202 	mul.w	r2, r3, r2
 800197c:	2300      	movs	r3, #0
 800197e:	4621      	mov	r1, r4
 8001980:	fb01 f303 	mul.w	r3, r1, r3
 8001984:	4413      	add	r3, r2
 8001986:	4aa2      	ldr	r2, [pc, #648]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x350>)
 8001988:	4621      	mov	r1, r4
 800198a:	fba1 1202 	umull	r1, r2, r1, r2
 800198e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001990:	460a      	mov	r2, r1
 8001992:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001994:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001996:	4413      	add	r3, r2
 8001998:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800199a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800199e:	2200      	movs	r2, #0
 80019a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80019a2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80019a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80019a8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80019ac:	f7fe fc32 	bl	8000214 <__aeabi_uldivmod>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4613      	mov	r3, r2
 80019b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80019ba:	e064      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019bc:	4b92      	ldr	r3, [pc, #584]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x348>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	099b      	lsrs	r3, r3, #6
 80019c2:	2200      	movs	r2, #0
 80019c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80019c6:	657a      	str	r2, [r7, #84]	@ 0x54
 80019c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80019ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80019d0:	2300      	movs	r3, #0
 80019d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019d4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80019d8:	4622      	mov	r2, r4
 80019da:	462b      	mov	r3, r5
 80019dc:	f04f 0000 	mov.w	r0, #0
 80019e0:	f04f 0100 	mov.w	r1, #0
 80019e4:	0159      	lsls	r1, r3, #5
 80019e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019ea:	0150      	lsls	r0, r2, #5
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4621      	mov	r1, r4
 80019f2:	1a51      	subs	r1, r2, r1
 80019f4:	6139      	str	r1, [r7, #16]
 80019f6:	4629      	mov	r1, r5
 80019f8:	eb63 0301 	sbc.w	r3, r3, r1
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	f04f 0200 	mov.w	r2, #0
 8001a02:	f04f 0300 	mov.w	r3, #0
 8001a06:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a0a:	4659      	mov	r1, fp
 8001a0c:	018b      	lsls	r3, r1, #6
 8001a0e:	4651      	mov	r1, sl
 8001a10:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a14:	4651      	mov	r1, sl
 8001a16:	018a      	lsls	r2, r1, #6
 8001a18:	4651      	mov	r1, sl
 8001a1a:	ebb2 0801 	subs.w	r8, r2, r1
 8001a1e:	4659      	mov	r1, fp
 8001a20:	eb63 0901 	sbc.w	r9, r3, r1
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	f04f 0300 	mov.w	r3, #0
 8001a2c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a30:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a34:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a38:	4690      	mov	r8, r2
 8001a3a:	4699      	mov	r9, r3
 8001a3c:	4623      	mov	r3, r4
 8001a3e:	eb18 0303 	adds.w	r3, r8, r3
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	462b      	mov	r3, r5
 8001a46:	eb49 0303 	adc.w	r3, r9, r3
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	f04f 0300 	mov.w	r3, #0
 8001a54:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a58:	4629      	mov	r1, r5
 8001a5a:	028b      	lsls	r3, r1, #10
 8001a5c:	4621      	mov	r1, r4
 8001a5e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a62:	4621      	mov	r1, r4
 8001a64:	028a      	lsls	r2, r1, #10
 8001a66:	4610      	mov	r0, r2
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a6e:	2200      	movs	r2, #0
 8001a70:	643b      	str	r3, [r7, #64]	@ 0x40
 8001a72:	647a      	str	r2, [r7, #68]	@ 0x44
 8001a74:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001a78:	f7fe fbcc 	bl	8000214 <__aeabi_uldivmod>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4613      	mov	r3, r2
 8001a82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a86:	4b60      	ldr	r3, [pc, #384]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	0c1b      	lsrs	r3, r3, #16
 8001a8c:	f003 0303 	and.w	r3, r3, #3
 8001a90:	3301      	adds	r3, #1
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8001a98:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001a9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001aa8:	e0a6      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aaa:	4b57      	ldr	r3, [pc, #348]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x348>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ab2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ab6:	4b54      	ldr	r3, [pc, #336]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x348>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d02a      	beq.n	8001b18 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac2:	4b51      	ldr	r3, [pc, #324]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x348>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	099b      	lsrs	r3, r3, #6
 8001ac8:	2200      	movs	r2, #0
 8001aca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001acc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ad0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4b4e      	ldr	r3, [pc, #312]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x350>)
 8001ad8:	fb03 f201 	mul.w	r2, r3, r1
 8001adc:	2300      	movs	r3, #0
 8001ade:	fb00 f303 	mul.w	r3, r0, r3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	4a4a      	ldr	r2, [pc, #296]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x350>)
 8001ae6:	fba0 1202 	umull	r1, r2, r0, r2
 8001aea:	677a      	str	r2, [r7, #116]	@ 0x74
 8001aec:	460a      	mov	r2, r1
 8001aee:	673a      	str	r2, [r7, #112]	@ 0x70
 8001af0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001af2:	4413      	add	r3, r2
 8001af4:	677b      	str	r3, [r7, #116]	@ 0x74
 8001af6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001afa:	2200      	movs	r2, #0
 8001afc:	633b      	str	r3, [r7, #48]	@ 0x30
 8001afe:	637a      	str	r2, [r7, #52]	@ 0x34
 8001b00:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001b04:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001b08:	f7fe fb84 	bl	8000214 <__aeabi_uldivmod>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4613      	mov	r3, r2
 8001b12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001b16:	e05b      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b18:	4b3b      	ldr	r3, [pc, #236]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	099b      	lsrs	r3, r3, #6
 8001b1e:	2200      	movs	r2, #0
 8001b20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b2a:	623b      	str	r3, [r7, #32]
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b34:	4642      	mov	r2, r8
 8001b36:	464b      	mov	r3, r9
 8001b38:	f04f 0000 	mov.w	r0, #0
 8001b3c:	f04f 0100 	mov.w	r1, #0
 8001b40:	0159      	lsls	r1, r3, #5
 8001b42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b46:	0150      	lsls	r0, r2, #5
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4641      	mov	r1, r8
 8001b4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b52:	4649      	mov	r1, r9
 8001b54:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	f04f 0300 	mov.w	r3, #0
 8001b60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b6c:	ebb2 040a 	subs.w	r4, r2, sl
 8001b70:	eb63 050b 	sbc.w	r5, r3, fp
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	f04f 0300 	mov.w	r3, #0
 8001b7c:	00eb      	lsls	r3, r5, #3
 8001b7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b82:	00e2      	lsls	r2, r4, #3
 8001b84:	4614      	mov	r4, r2
 8001b86:	461d      	mov	r5, r3
 8001b88:	4643      	mov	r3, r8
 8001b8a:	18e3      	adds	r3, r4, r3
 8001b8c:	603b      	str	r3, [r7, #0]
 8001b8e:	464b      	mov	r3, r9
 8001b90:	eb45 0303 	adc.w	r3, r5, r3
 8001b94:	607b      	str	r3, [r7, #4]
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ba2:	4629      	mov	r1, r5
 8001ba4:	028b      	lsls	r3, r1, #10
 8001ba6:	4621      	mov	r1, r4
 8001ba8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bac:	4621      	mov	r1, r4
 8001bae:	028a      	lsls	r2, r1, #10
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bb8:	2200      	movs	r2, #0
 8001bba:	61bb      	str	r3, [r7, #24]
 8001bbc:	61fa      	str	r2, [r7, #28]
 8001bbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bc2:	f7fe fb27 	bl	8000214 <__aeabi_uldivmod>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4613      	mov	r3, r2
 8001bcc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001bd0:	4b0d      	ldr	r3, [pc, #52]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x348>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	0f1b      	lsrs	r3, r3, #28
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8001bde:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001be2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001bee:	e003      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bf0:	4b06      	ldr	r3, [pc, #24]	@ (8001c0c <HAL_RCC_GetSysClockFreq+0x34c>)
 8001bf2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001bf6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bf8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3798      	adds	r7, #152	@ 0x98
 8001c00:	46bd      	mov	sp, r7
 8001c02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	00f42400 	.word	0x00f42400
 8001c10:	017d7840 	.word	0x017d7840

08001c14 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e28d      	b.n	8002142 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 8083 	beq.w	8001d3a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001c34:	4b94      	ldr	r3, [pc, #592]	@ (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 030c 	and.w	r3, r3, #12
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d019      	beq.n	8001c74 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001c40:	4b91      	ldr	r3, [pc, #580]	@ (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 030c 	and.w	r3, r3, #12
        || \
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	d106      	bne.n	8001c5a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001c4c:	4b8e      	ldr	r3, [pc, #568]	@ (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c58:	d00c      	beq.n	8001c74 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c5a:	4b8b      	ldr	r3, [pc, #556]	@ (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001c62:	2b0c      	cmp	r3, #12
 8001c64:	d112      	bne.n	8001c8c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c66:	4b88      	ldr	r3, [pc, #544]	@ (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c72:	d10b      	bne.n	8001c8c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c74:	4b84      	ldr	r3, [pc, #528]	@ (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d05b      	beq.n	8001d38 <HAL_RCC_OscConfig+0x124>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d157      	bne.n	8001d38 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e25a      	b.n	8002142 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c94:	d106      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x90>
 8001c96:	4b7c      	ldr	r3, [pc, #496]	@ (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a7b      	ldr	r2, [pc, #492]	@ (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001c9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	e01d      	b.n	8001ce0 <HAL_RCC_OscConfig+0xcc>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cac:	d10c      	bne.n	8001cc8 <HAL_RCC_OscConfig+0xb4>
 8001cae:	4b76      	ldr	r3, [pc, #472]	@ (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a75      	ldr	r2, [pc, #468]	@ (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001cb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	4b73      	ldr	r3, [pc, #460]	@ (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a72      	ldr	r2, [pc, #456]	@ (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001cc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	e00b      	b.n	8001ce0 <HAL_RCC_OscConfig+0xcc>
 8001cc8:	4b6f      	ldr	r3, [pc, #444]	@ (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a6e      	ldr	r2, [pc, #440]	@ (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001cce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	4b6c      	ldr	r3, [pc, #432]	@ (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a6b      	ldr	r2, [pc, #428]	@ (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001cda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d013      	beq.n	8001d10 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce8:	f7ff fbee 	bl	80014c8 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf0:	f7ff fbea 	bl	80014c8 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b64      	cmp	r3, #100	@ 0x64
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e21f      	b.n	8002142 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d02:	4b61      	ldr	r3, [pc, #388]	@ (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0f0      	beq.n	8001cf0 <HAL_RCC_OscConfig+0xdc>
 8001d0e:	e014      	b.n	8001d3a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d10:	f7ff fbda 	bl	80014c8 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d18:	f7ff fbd6 	bl	80014c8 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b64      	cmp	r3, #100	@ 0x64
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e20b      	b.n	8002142 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d2a:	4b57      	ldr	r3, [pc, #348]	@ (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0x104>
 8001d36:	e000      	b.n	8001d3a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d06f      	beq.n	8001e26 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d46:	4b50      	ldr	r3, [pc, #320]	@ (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 030c 	and.w	r3, r3, #12
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d017      	beq.n	8001d82 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001d52:	4b4d      	ldr	r3, [pc, #308]	@ (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 030c 	and.w	r3, r3, #12
        || \
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d105      	bne.n	8001d6a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001d5e:	4b4a      	ldr	r3, [pc, #296]	@ (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00b      	beq.n	8001d82 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d6a:	4b47      	ldr	r3, [pc, #284]	@ (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001d72:	2b0c      	cmp	r3, #12
 8001d74:	d11c      	bne.n	8001db0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d76:	4b44      	ldr	r3, [pc, #272]	@ (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d116      	bne.n	8001db0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d82:	4b41      	ldr	r3, [pc, #260]	@ (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d005      	beq.n	8001d9a <HAL_RCC_OscConfig+0x186>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d001      	beq.n	8001d9a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e1d3      	b.n	8002142 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	4937      	ldr	r1, [pc, #220]	@ (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dae:	e03a      	b.n	8001e26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d020      	beq.n	8001dfa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db8:	4b34      	ldr	r3, [pc, #208]	@ (8001e8c <HAL_RCC_OscConfig+0x278>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbe:	f7ff fb83 	bl	80014c8 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc6:	f7ff fb7f 	bl	80014c8 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e1b4      	b.n	8002142 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd8:	4b2b      	ldr	r3, [pc, #172]	@ (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0f0      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de4:	4b28      	ldr	r3, [pc, #160]	@ (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	4925      	ldr	r1, [pc, #148]	@ (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	600b      	str	r3, [r1, #0]
 8001df8:	e015      	b.n	8001e26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dfa:	4b24      	ldr	r3, [pc, #144]	@ (8001e8c <HAL_RCC_OscConfig+0x278>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e00:	f7ff fb62 	bl	80014c8 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e08:	f7ff fb5e 	bl	80014c8 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e193      	b.n	8002142 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d036      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d016      	beq.n	8001e68 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e3a:	4b15      	ldr	r3, [pc, #84]	@ (8001e90 <HAL_RCC_OscConfig+0x27c>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e40:	f7ff fb42 	bl	80014c8 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e48:	f7ff fb3e 	bl	80014c8 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e173      	b.n	8002142 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001e5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0f0      	beq.n	8001e48 <HAL_RCC_OscConfig+0x234>
 8001e66:	e01b      	b.n	8001ea0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e68:	4b09      	ldr	r3, [pc, #36]	@ (8001e90 <HAL_RCC_OscConfig+0x27c>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e6e:	f7ff fb2b 	bl	80014c8 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e74:	e00e      	b.n	8001e94 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e76:	f7ff fb27 	bl	80014c8 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d907      	bls.n	8001e94 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e15c      	b.n	8002142 <HAL_RCC_OscConfig+0x52e>
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	42470000 	.word	0x42470000
 8001e90:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e94:	4b8a      	ldr	r3, [pc, #552]	@ (80020c0 <HAL_RCC_OscConfig+0x4ac>)
 8001e96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1ea      	bne.n	8001e76 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 8097 	beq.w	8001fdc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eb2:	4b83      	ldr	r3, [pc, #524]	@ (80020c0 <HAL_RCC_OscConfig+0x4ac>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10f      	bne.n	8001ede <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	4b7f      	ldr	r3, [pc, #508]	@ (80020c0 <HAL_RCC_OscConfig+0x4ac>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec6:	4a7e      	ldr	r2, [pc, #504]	@ (80020c0 <HAL_RCC_OscConfig+0x4ac>)
 8001ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ecc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ece:	4b7c      	ldr	r3, [pc, #496]	@ (80020c0 <HAL_RCC_OscConfig+0x4ac>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eda:	2301      	movs	r3, #1
 8001edc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ede:	4b79      	ldr	r3, [pc, #484]	@ (80020c4 <HAL_RCC_OscConfig+0x4b0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d118      	bne.n	8001f1c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eea:	4b76      	ldr	r3, [pc, #472]	@ (80020c4 <HAL_RCC_OscConfig+0x4b0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a75      	ldr	r2, [pc, #468]	@ (80020c4 <HAL_RCC_OscConfig+0x4b0>)
 8001ef0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ef6:	f7ff fae7 	bl	80014c8 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001efe:	f7ff fae3 	bl	80014c8 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e118      	b.n	8002142 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f10:	4b6c      	ldr	r3, [pc, #432]	@ (80020c4 <HAL_RCC_OscConfig+0x4b0>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0f0      	beq.n	8001efe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d106      	bne.n	8001f32 <HAL_RCC_OscConfig+0x31e>
 8001f24:	4b66      	ldr	r3, [pc, #408]	@ (80020c0 <HAL_RCC_OscConfig+0x4ac>)
 8001f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f28:	4a65      	ldr	r2, [pc, #404]	@ (80020c0 <HAL_RCC_OscConfig+0x4ac>)
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f30:	e01c      	b.n	8001f6c <HAL_RCC_OscConfig+0x358>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b05      	cmp	r3, #5
 8001f38:	d10c      	bne.n	8001f54 <HAL_RCC_OscConfig+0x340>
 8001f3a:	4b61      	ldr	r3, [pc, #388]	@ (80020c0 <HAL_RCC_OscConfig+0x4ac>)
 8001f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f3e:	4a60      	ldr	r2, [pc, #384]	@ (80020c0 <HAL_RCC_OscConfig+0x4ac>)
 8001f40:	f043 0304 	orr.w	r3, r3, #4
 8001f44:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f46:	4b5e      	ldr	r3, [pc, #376]	@ (80020c0 <HAL_RCC_OscConfig+0x4ac>)
 8001f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f4a:	4a5d      	ldr	r2, [pc, #372]	@ (80020c0 <HAL_RCC_OscConfig+0x4ac>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f52:	e00b      	b.n	8001f6c <HAL_RCC_OscConfig+0x358>
 8001f54:	4b5a      	ldr	r3, [pc, #360]	@ (80020c0 <HAL_RCC_OscConfig+0x4ac>)
 8001f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f58:	4a59      	ldr	r2, [pc, #356]	@ (80020c0 <HAL_RCC_OscConfig+0x4ac>)
 8001f5a:	f023 0301 	bic.w	r3, r3, #1
 8001f5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f60:	4b57      	ldr	r3, [pc, #348]	@ (80020c0 <HAL_RCC_OscConfig+0x4ac>)
 8001f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f64:	4a56      	ldr	r2, [pc, #344]	@ (80020c0 <HAL_RCC_OscConfig+0x4ac>)
 8001f66:	f023 0304 	bic.w	r3, r3, #4
 8001f6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d015      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f74:	f7ff faa8 	bl	80014c8 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f7a:	e00a      	b.n	8001f92 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f7c:	f7ff faa4 	bl	80014c8 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e0d7      	b.n	8002142 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f92:	4b4b      	ldr	r3, [pc, #300]	@ (80020c0 <HAL_RCC_OscConfig+0x4ac>)
 8001f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0ee      	beq.n	8001f7c <HAL_RCC_OscConfig+0x368>
 8001f9e:	e014      	b.n	8001fca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa0:	f7ff fa92 	bl	80014c8 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa6:	e00a      	b.n	8001fbe <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa8:	f7ff fa8e 	bl	80014c8 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e0c1      	b.n	8002142 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fbe:	4b40      	ldr	r3, [pc, #256]	@ (80020c0 <HAL_RCC_OscConfig+0x4ac>)
 8001fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1ee      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fca:	7dfb      	ldrb	r3, [r7, #23]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d105      	bne.n	8001fdc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd0:	4b3b      	ldr	r3, [pc, #236]	@ (80020c0 <HAL_RCC_OscConfig+0x4ac>)
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd4:	4a3a      	ldr	r2, [pc, #232]	@ (80020c0 <HAL_RCC_OscConfig+0x4ac>)
 8001fd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fda:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 80ad 	beq.w	8002140 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fe6:	4b36      	ldr	r3, [pc, #216]	@ (80020c0 <HAL_RCC_OscConfig+0x4ac>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 030c 	and.w	r3, r3, #12
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d060      	beq.n	80020b4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d145      	bne.n	8002086 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ffa:	4b33      	ldr	r3, [pc, #204]	@ (80020c8 <HAL_RCC_OscConfig+0x4b4>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002000:	f7ff fa62 	bl	80014c8 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002008:	f7ff fa5e 	bl	80014c8 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e093      	b.n	8002142 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800201a:	4b29      	ldr	r3, [pc, #164]	@ (80020c0 <HAL_RCC_OscConfig+0x4ac>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69da      	ldr	r2, [r3, #28]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002034:	019b      	lsls	r3, r3, #6
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800203c:	085b      	lsrs	r3, r3, #1
 800203e:	3b01      	subs	r3, #1
 8002040:	041b      	lsls	r3, r3, #16
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002048:	061b      	lsls	r3, r3, #24
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002050:	071b      	lsls	r3, r3, #28
 8002052:	491b      	ldr	r1, [pc, #108]	@ (80020c0 <HAL_RCC_OscConfig+0x4ac>)
 8002054:	4313      	orrs	r3, r2
 8002056:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002058:	4b1b      	ldr	r3, [pc, #108]	@ (80020c8 <HAL_RCC_OscConfig+0x4b4>)
 800205a:	2201      	movs	r2, #1
 800205c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205e:	f7ff fa33 	bl	80014c8 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002066:	f7ff fa2f 	bl	80014c8 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e064      	b.n	8002142 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002078:	4b11      	ldr	r3, [pc, #68]	@ (80020c0 <HAL_RCC_OscConfig+0x4ac>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0f0      	beq.n	8002066 <HAL_RCC_OscConfig+0x452>
 8002084:	e05c      	b.n	8002140 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002086:	4b10      	ldr	r3, [pc, #64]	@ (80020c8 <HAL_RCC_OscConfig+0x4b4>)
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208c:	f7ff fa1c 	bl	80014c8 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002094:	f7ff fa18 	bl	80014c8 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e04d      	b.n	8002142 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a6:	4b06      	ldr	r3, [pc, #24]	@ (80020c0 <HAL_RCC_OscConfig+0x4ac>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f0      	bne.n	8002094 <HAL_RCC_OscConfig+0x480>
 80020b2:	e045      	b.n	8002140 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d107      	bne.n	80020cc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e040      	b.n	8002142 <HAL_RCC_OscConfig+0x52e>
 80020c0:	40023800 	.word	0x40023800
 80020c4:	40007000 	.word	0x40007000
 80020c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020cc:	4b1f      	ldr	r3, [pc, #124]	@ (800214c <HAL_RCC_OscConfig+0x538>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d030      	beq.n	800213c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d129      	bne.n	800213c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d122      	bne.n	800213c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80020fc:	4013      	ands	r3, r2
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002102:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002104:	4293      	cmp	r3, r2
 8002106:	d119      	bne.n	800213c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002112:	085b      	lsrs	r3, r3, #1
 8002114:	3b01      	subs	r3, #1
 8002116:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002118:	429a      	cmp	r2, r3
 800211a:	d10f      	bne.n	800213c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002126:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002128:	429a      	cmp	r2, r3
 800212a:	d107      	bne.n	800213c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002136:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002138:	429a      	cmp	r2, r3
 800213a:	d001      	beq.n	8002140 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e000      	b.n	8002142 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40023800 	.word	0x40023800

08002150 <memset>:
 8002150:	4402      	add	r2, r0
 8002152:	4603      	mov	r3, r0
 8002154:	4293      	cmp	r3, r2
 8002156:	d100      	bne.n	800215a <memset+0xa>
 8002158:	4770      	bx	lr
 800215a:	f803 1b01 	strb.w	r1, [r3], #1
 800215e:	e7f9      	b.n	8002154 <memset+0x4>

08002160 <__libc_init_array>:
 8002160:	b570      	push	{r4, r5, r6, lr}
 8002162:	4d0d      	ldr	r5, [pc, #52]	@ (8002198 <__libc_init_array+0x38>)
 8002164:	4c0d      	ldr	r4, [pc, #52]	@ (800219c <__libc_init_array+0x3c>)
 8002166:	1b64      	subs	r4, r4, r5
 8002168:	10a4      	asrs	r4, r4, #2
 800216a:	2600      	movs	r6, #0
 800216c:	42a6      	cmp	r6, r4
 800216e:	d109      	bne.n	8002184 <__libc_init_array+0x24>
 8002170:	4d0b      	ldr	r5, [pc, #44]	@ (80021a0 <__libc_init_array+0x40>)
 8002172:	4c0c      	ldr	r4, [pc, #48]	@ (80021a4 <__libc_init_array+0x44>)
 8002174:	f000 f826 	bl	80021c4 <_init>
 8002178:	1b64      	subs	r4, r4, r5
 800217a:	10a4      	asrs	r4, r4, #2
 800217c:	2600      	movs	r6, #0
 800217e:	42a6      	cmp	r6, r4
 8002180:	d105      	bne.n	800218e <__libc_init_array+0x2e>
 8002182:	bd70      	pop	{r4, r5, r6, pc}
 8002184:	f855 3b04 	ldr.w	r3, [r5], #4
 8002188:	4798      	blx	r3
 800218a:	3601      	adds	r6, #1
 800218c:	e7ee      	b.n	800216c <__libc_init_array+0xc>
 800218e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002192:	4798      	blx	r3
 8002194:	3601      	adds	r6, #1
 8002196:	e7f2      	b.n	800217e <__libc_init_array+0x1e>
 8002198:	0800225c 	.word	0x0800225c
 800219c:	0800225c 	.word	0x0800225c
 80021a0:	0800225c 	.word	0x0800225c
 80021a4:	08002260 	.word	0x08002260

080021a8 <memcpy>:
 80021a8:	440a      	add	r2, r1
 80021aa:	4291      	cmp	r1, r2
 80021ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80021b0:	d100      	bne.n	80021b4 <memcpy+0xc>
 80021b2:	4770      	bx	lr
 80021b4:	b510      	push	{r4, lr}
 80021b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80021ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80021be:	4291      	cmp	r1, r2
 80021c0:	d1f9      	bne.n	80021b6 <memcpy+0xe>
 80021c2:	bd10      	pop	{r4, pc}

080021c4 <_init>:
 80021c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021c6:	bf00      	nop
 80021c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ca:	bc08      	pop	{r3}
 80021cc:	469e      	mov	lr, r3
 80021ce:	4770      	bx	lr

080021d0 <_fini>:
 80021d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d2:	bf00      	nop
 80021d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021d6:	bc08      	pop	{r3}
 80021d8:	469e      	mov	lr, r3
 80021da:	4770      	bx	lr
